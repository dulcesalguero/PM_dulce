/* PROYECTO #2 - mecanismo de ojos
 * proyectt.c
 * Progra de Micros - 10
 * 
 * Author : dulce
 */ 

#define F_CPU 16000000UL  // Definir primero la frecuencia

#include <avr/io.h>
#include <util/delay.h>
#include <avr/eeprom.h>
#include <avr/interrupt.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

// --- Definiciones de pines ---
#define SERVO1_PIN   PD3  // OC2B
#define SERVO2_PIN   PD5  // OC0B
#define SERVO3_PIN   PD6  // OC0A
#define SERVO4_PIN   PB1  // OC1A
#define SERVO5_PIN   PB2  // OC1B
#define SERVO6_PIN   PB3  // OC2A

// Canales ADC
#define POT1_CH     0  // A0
#define POT2_CH     1  // A1
#define POT3_CH     2  // A2
#define POT4_CH     3  // A3
#define JOY_X_CH    6  // A6
#define JOY_Y_CH    7  // A7

#define LED_MODE    PD2

// Modos de operación
#define MANUAL       0
#define EEPROM_MODE  1
#define UART_MODE    2

// --- Variables globales ---
volatile uint8_t currentMode = MANUAL;
volatile uint16_t eepromSpeed = 1000;

// --- Prototipos de funciones ---
void initPorts();
void initADC();
void initPWM();
void initUART(uint16_t baudRate);
void UART_sendString(const char *str);
uint16_t readADC(uint8_t channel);
void setServoAngle(uint8_t servoNum, uint8_t angle);
void manualControl();
void playFromEEPROM();
void uartControl();
void handleSerialCommand(const char *command);
void saveToEEPROM();
uint8_t read_eeprom(uint16_t address);
void write_eeprom(uint16_t address, uint8_t data);
void safe_delay_ms(uint16_t ms);

// --- Función principal ---
int main(void) {
	initPorts();
	initADC();
	initPWM();
	initUART(9600);
	sei();

	UART_sendString("Sistema iniciado. Listo para comandos.\r\n");

	while(1) {
		switch(currentMode) {
			case MANUAL:
			manualControl();
			safe_delay_ms(eepromSpeed); // ? Esto funciona con variables
			break;
			case EEPROM_MODE:
			playFromEEPROM();
			break;
			case UART_MODE:
			uartControl();
			safe_delay_ms(eepromSpeed); // ? Esto funciona con variables
			break;
		}
	}
}

// --- Inicialización de hardware ---
void initPorts() {
	DDRD |= (1 << LED_MODE);
	DDRD |= (1 << SERVO1_PIN) | (1 << SERVO2_PIN) | (1 << SERVO3_PIN);
	DDRB |= (1 << SERVO4_PIN) | (1 << SERVO5_PIN) | (1 << SERVO6_PIN);
}

void initADC() {
	ADMUX |= (1 << REFS0);
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}

void initPWM() {
	// Timer1 para Servos 4,5,6
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
	ICR1 = 39999;

	// Timer2 para Servos 1,3
	TCCR2A |= (1 << WGM21) | (1 << WGM20) | (1 << COM2B1);
	TCCR2B |= (1 << WGM22) | (1 << CS21);
	OCR2A = 199;
}

void initUART(uint16_t baudRate) {
	uint16_t ubrr = F_CPU / 16 / baudRate - 1;
	UBRR0H = (uint8_t)(ubrr >> 8);
	UBRR0L = (uint8_t)ubrr;
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
}

// --- Funciones EEPROM seguras ---
uint8_t read_eeprom(uint16_t address) {
	return eeprom_read_byte((const uint8_t*)(uintptr_t)address);
}

void write_eeprom(uint16_t address, uint8_t data) {
	eeprom_write_byte((uint8_t*)(uintptr_t)address, data);
}

// --- Delay seguro para variables ---
void safe_delay_ms(uint16_t ms) {
	for(uint16_t i = 0; i < ms/10; i++) {
		safe_delay_ms(eepromSpeed); // ? Esto funciona con variables
	}
	safe_delay_ms(eepromSpeed); // ? Esto funciona con variables
}

// --- Control de servos ---
void setServoAngle(uint8_t servoNum, uint8_t angle) {
	uint16_t pulseWidth = (angle * 10) + 1000;
	pulseWidth = (pulseWidth * 2) - 1;

	switch(servoNum) {
		case 1: OCR2B = pulseWidth; break;
		case 2: OCR0B = pulseWidth; break;
		case 3: OCR0A = pulseWidth; break;
		case 4: OCR1A = pulseWidth; break;
		case 5: OCR1B = pulseWidth; break;
		case 6: OCR2A = pulseWidth; break;
	}
}

// --- Lectura ADC ---
uint16_t readADC(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
	ADCSRA |= (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	return ADC;
}

// --- Modos de operación ---
void manualControl() {
	PORTD &= ~(1 << LED_MODE);

	uint16_t joyX = readADC(JOY_X_CH);
	uint16_t joyY = readADC(JOY_Y_CH);
	uint16_t pot1 = readADC(POT1_CH);
	uint16_t pot2 = readADC(POT2_CH);

	uint8_t joyXAngle = (joyX * 180) / 1023;
	uint8_t joyYAngle = (joyY * 180) / 1023;
	uint8_t pot1Angle = (pot1 * 180) / 1023;
	uint8_t pot2Angle = (pot2 * 150) / 1023;

	setServoAngle(1, (joyXAngle + joyYAngle) / 2);
	setServoAngle(2, (joyXAngle + joyYAngle) / 2);
	setServoAngle(5, joyYAngle);
	setServoAngle(6, joyXAngle);

	setServoAngle(1, pot1Angle);
	setServoAngle(2, pot1Angle);
	setServoAngle(3, pot2Angle);
	setServoAngle(4, pot2Angle);

	eepromSpeed = 500 + (readADC(POT4_CH) * 1500 / 1023);
}

void playFromEEPROM() {
	PORTD |= (1 << LED_MODE);

	uint8_t angles[6];
	for(uint8_t i = 0; i < 6; i++) {
		angles[i] = read_eeprom(i);
		setServoAngle(i + 1, angles[i]);
	}

	safe_delay_ms(eepromSpeed); // funciona con variables
}

void uartControl() {
	PORTD ^= (1 << LED_MODE);
	safe_delay_ms(eepromSpeed); 
}

// --- Comunicación serial ---
ISR(USART_RX_vect) {
	static char buffer[32];
	static uint8_t index = 0;

	char received = UDR0;
	if(received == '\n' || received == '\r') {
		buffer[index] = '\0';
		handleSerialCommand(buffer);
		index = 0;
		} else {
		buffer[index++] = received;
		if(index >= sizeof(buffer)) index = 0;
	}
}

void handleSerialCommand(const char *command) {
	if(strncmp(command, "MODE ", 5) == 0) {
		uint8_t mode = atoi(command + 5);
		if(mode <= 2) {
			currentMode = mode;
			UART_sendString("Modo cambiado\r\n");
		}
		} else if(strcmp(command, "SAVE") == 0) {
		saveToEEPROM();
		UART_sendString("Posiciones guardadas\r\n");
		} else if(command[0] == 'M') {
		uint8_t servoNum = atoi(command + 1);
		uint8_t angle = atoi(strchr(command, ' ') + 1);
		if(servoNum >= 1 && servoNum <= 6 && angle <= 180) {
			setServoAngle(servoNum, angle);
		}
	}
}

void saveToEEPROM() {
	for(uint8_t i = 0; i < 6; i++) {
		write_eeprom(i, (i + 1) * 30);
	}
}

void UART_sendString(const char *str) {
	while(*str) {
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = *str++;
	}
}
