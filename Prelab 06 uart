/*** Pre lab 06 -- UART */ 

/*
 * Prelab06_UART_LEDs.c
 * Author: Dulce Salguero - 231208
 * Progra de Micros - 10
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

/****************************************/
// Function prototypes
void setup();
void initUART();
void writeChar(char caracter);


/****************************************/
// Main Function
int main(void) {
    setup(); 
    writeChar('A'); // Mensaje inicial
    
    while (1) {
        // El RX se maneja por interrupción (ISR)
    }
}

/****************************************/
// NON-Interrupt subroutines
void setup() {
    cli(); // Deshabilitar interrupciones
    
    // Configurar LEDs:
    DDRB |= 0x1F; // PB0-PB4 como salida (0b00011111)
    DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // PD5-PD7 como salida
    
    PORTB = 0x00; // LEDs apagados inicialmente
    PORTD &= ~((1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7)); // Apagar PD5-PD7
    
    initUART(); // Configurar UART
    sei(); // Habilitar interrupciones
}

void initUART() {
    // P1: Configurar PD1 (TX) como salida y PD0 (RX) como entrada
    DDRD |= (1 << DDD1); // TX (Salida)
    DDRD &= ~(1 << DDD0); // RX (Entrada)
    
    // P2: Configurar UCSR0A (Modo normal)
    UCSR0A = 0; 
    
    // P3: Habilitar TX, RX e interrupción por RX
    UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); 
    
    // P4: Configurar formato: 8 bits, sin paridad, 1 stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); 
    
    // P5: Baud rate a 9600 (@16MHz)
    UBRR0 = 103;
}

void writeChar(char caracter) {
    while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
    UDR0 = caracter; // Enviar carácter
}


// Interrupt routines
ISR(USART_RX_vect) {
    char received_char = UDR0; // Leer carácter recibido
    
    // Mostrar en LEDs:
    PORTB = (received_char & 0x1F); // Bits 0-4 en PB0-PB4
    PORTD = (PORTD & 0x1F) | ((received_char & 0xE0) >> 2); // Bits 5-7 en PD5-PD7
    
    // Opcional: Eco en terminal
    writeChar(received_char); 
}
