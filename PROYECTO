// Prueba servo pies // 
// RECEN PORQUE FUNCIONE // 

MAIN 
///// PRELAB 05 - PWM /////
/// Universidad del Valle de Guatemala 
/// Dulce Salguero - 231208
//// PM - 10
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
#include "PWMServo.h"

void ADC_init() {
	ADMUX = (1 << REFS0); // AVcc como referencia
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // Prescaler de 8
}

uint16_t ADC_read() {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
	while (ADCSRA & (1 << ADSC)); // Esperar a que termine
	return ADC; // Leer el resultado
}

int main(void) {
	ADC_init();
	PWM_init();

	while (1) {
		uint16_t adc = ADC_read(); // 0 - 1023
		uint16_t angle = (adc * 3500.0/1023.0) + 1000; // Mapear a 0-180 grados
		PWM_setAngle(angle);
		_delay_ms(10);
	}
}

.h 
#ifndef PWMSERVO_H
#define PWMSERVO_H

#include <avr/io.h>

void PWM_init();
void PWM_setAngle(uint16_t angle);

#endif

.c 
#include "PWMServo.h"

void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8

	ICR1 = 40000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
	DDRB |= (1 << PB1); // OC1A (D9) como salida
}

void PWM_setAngle(uint16_t angle) {
	// Mapear 0-180° a 1-2 ms ? 2000 a 4000 ticks (0.5 us cada tick)
	//uint16_t ticks = 2000 + (angle * 11); // 11 = (2000/180)
	//OCR1A = ticks;
	OCR1A = angle; 
}
