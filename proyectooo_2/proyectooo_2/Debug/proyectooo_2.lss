
proyectooo_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000936  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec0  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c5  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  000031eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  88:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <writeEEPROM>:
 */ 
#include "EPROM.h"

void writeEEPROM(uint8_t dato, uint16_t direcc)
{
	while (EECR &(1<<EEPE));
  90:	f9 99       	sbic	0x1f, 1	; 31
  92:	fe cf       	rjmp	.-4      	; 0x90 <writeEEPROM>
	EEAR = direcc;
  94:	72 bd       	out	0x22, r23	; 34
  96:	61 bd       	out	0x21, r22	; 33
	EEDR = dato;
  98:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE);
  9a:	8f b3       	in	r24, 0x1f	; 31
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);
  a0:	8f b3       	in	r24, 0x1f	; 31
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8f bb       	out	0x1f, r24	; 31
  a6:	08 95       	ret

000000a8 <readEEPROM>:
	
}

uint8_t readEEPROM(uint16_t direcc)
{
	while (EECR &(1<<EEPE));
  a8:	f9 99       	sbic	0x1f, 1	; 31
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <readEEPROM>
	EEAR = direcc;
  ac:	92 bd       	out	0x22, r25	; 34
  ae:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
  b6:	80 b5       	in	r24, 0x20	; 32
	
  b8:	08 95       	ret

000000ba <initADC>:
	}
}
//subrutinas

void initADC(){
	ADMUX = (1 << REFS0); // Referencia AVcc
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, preescalador 128
  c0:	87 e8       	ldi	r24, 0x87	; 135
  c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c6:	08 95       	ret

000000c8 <setup>:
}

void setup()
{
	cli();
  c8:	f8 94       	cli
	DDRC = 0x00;
  ca:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  d0:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PORTD2) |(1 << PORTD7) ;  // D2 como entrada
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	84 68       	ori	r24, 0x84	; 132
  d6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD2) | (1 << PORTD7);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	84 68       	ori	r24, 0x84	; 132
  dc:	8b b9       	out	0x0b, r24	; 11
	

	
	// PIN CHANGE EN D7
	PCMSK2 |= (1 << PIND7);
  de:	ed e6       	ldi	r30, 0x6D	; 109
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
  e8:	e8 e6       	ldi	r30, 0x68	; 104
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	
	initUART();	
  f2:	0e 94 84 02 	call	0x508	; 0x508 <initUART>
	sei();
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <leerADC>:
	
}


uint16_t leerADC(uint8_t canal) {
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0F); // Seleccionar canal
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	89 2b       	or	r24, r25
 106:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 112:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 116:	86 fd       	sbrc	r24, 6
 118:	fc cf       	rjmp	.-8      	; 0x112 <leerADC+0x18>
	return ADC; //
 11a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 11e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 122:	08 95       	ret

00000124 <PWM_init>:


void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A |= (1 << COM1A1) | (1 << WGM11) | (1 << COM1B1);
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 6a       	ori	r24, 0xA2	; 162
 12c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8a 61       	ori	r24, 0x1A	; 26
 136:	80 83       	st	Z, r24

	ICR1 = 65000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	9d ef       	ldi	r25, 0xFD	; 253
 13c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 140:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << PORTB1) | (1 << PORTB2); // OC1A (D9) como salida
 144:	84 b1       	in	r24, 0x04	; 4
 146:	86 60       	ori	r24, 0x06	; 6
 148:	84 b9       	out	0x04, r24	; 4
 14a:	08 95       	ret

0000014c <PWM_init2>:
}

void PWM_init2() {
	// Configurar Timer2 para modo FASAT PWM PWM con TOP=0xFF
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21); // Non-inverting en ambos canales
 14c:	e0 eb       	ldi	r30, 0xB0	; 176
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	83 6a       	ori	r24, 0xA3	; 163
 154:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler de 1024 (ajustar según necesidades)
 156:	e1 eb       	ldi	r30, 0xB1	; 177
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	87 60       	ori	r24, 0x07	; 7
 15e:	80 83       	st	Z, r24

	DDRD |= (1 << PORTD3); // OC2B (PD3) como salida
 160:	8a b1       	in	r24, 0x0a	; 10
 162:	88 60       	ori	r24, 0x08	; 8
 164:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB3);  // OC2A (PB3) como salida (en la mayoría de los ATmega)
 166:	84 b1       	in	r24, 0x04	; 4
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	84 b9       	out	0x04, r24	; 4
 16c:	08 95       	ret

0000016e <PWM_init0>:
}


void PWM_init0() {
	// Configurar Timer2 para modo FAST PWM top 0xFF
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01); // Non-inverting en ambos canales
 16e:	84 b5       	in	r24, 0x24	; 36
 170:	83 6a       	ori	r24, 0xA3	; 163
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02)  | (1 << CS00); // Prescaler de 1024 (ajustar según necesidades)
 174:	85 b5       	in	r24, 0x25	; 37
 176:	85 60       	ori	r24, 0x05	; 5
 178:	85 bd       	out	0x25, r24	; 37

	DDRD |= (1 << PORTD6); // OC0A
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PORTD5);  // OC0B
 180:	8a b1       	in	r24, 0x0a	; 10
 182:	80 62       	ori	r24, 0x20	; 32
 184:	8a b9       	out	0x0a, r24	; 10
 186:	08 95       	ret

00000188 <PWM_setAngle>:
}

void PWM_setAngle(uint16_t angle) {
	OCR1A = angle;
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 190:	08 95       	ret

00000192 <PWM_setAngle2>:
}
void PWM_setAngle2(uint16_t mov) {
	OCR1B = mov;
 192:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 196:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 19a:	08 95       	ret

0000019c <PWM_setAngle3>:
}
void PWM_setAngle3(uint16_t tung) {
	OCR2A = tung;
 19c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1a0:	08 95       	ret

000001a2 <PWM_setAngle4>:
}
void PWM_setAngle4(uint16_t cerati) {
	OCR2B = cerati;
 1a2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 1a6:	08 95       	ret

000001a8 <PWM_setAngle5>:
}
void PWM_setAngle5(uint16_t angle5) {
	OCR0A = angle5;
 1a8:	87 bd       	out	0x27, r24	; 39
 1aa:	08 95       	ret

000001ac <PWM_setAngle6>:
}
void PWM_setAngle6(uint16_t angle6) {
	OCR0B = angle6;
 1ac:	88 bd       	out	0x28, r24	; 40
 1ae:	08 95       	ret

000001b0 <boton_presionado>:
}

uint8_t boton_presionado() {
	if (!(PIND & (1 << PORTD2))) { // Si el botón está presionado (LOW)
 1b0:	99 b1       	in	r25, 0x09	; 9
 1b2:	89 2f       	mov	r24, r25
 1b4:	84 70       	andi	r24, 0x04	; 4
 1b6:	92 fd       	sbrc	r25, 2
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <boton_presionado+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	39 ef       	ldi	r19, 0xF9	; 249
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <boton_presionado+0x10>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <boton_presionado+0x1a>
 1ca:	00 00       	nop
		_delay_ms(20);         // Espera para anti-rebote
		if (!(PIND & (1 << PORTD2))) { // Verifica nuevamente
 1cc:	4a 99       	sbic	0x09, 2	; 9
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <boton_presionado+0x26>
			return 1; // Botón realmente presionado
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
		}
	}
	return 0; // Botón no presionado
 1d4:	80 e0       	ldi	r24, 0x00	; 0
}
 1d6:	08 95       	ret

000001d8 <cambiar_modo>:

void cambiar_modo() {
	if (boton_presionado()) {
 1d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <boton_presionado>
 1dc:	88 23       	and	r24, r24
 1de:	a9 f0       	breq	.+42     	; 0x20a <cambiar_modo+0x32>
		// Espera hasta que se suelte el botón
		while (!(PIND & (1 << PORTD2)));
 1e0:	4a 9b       	sbis	0x09, 2	; 9
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <cambiar_modo+0x8>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	89 ef       	ldi	r24, 0xF9	; 249
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <cambiar_modo+0x12>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <cambiar_modo+0x1c>
 1f4:	00 00       	nop
		_delay_ms(20); // Anti-rebote al soltar
		
		// Cambia al siguiente modo
		modo_actual = (modo_actual + 1) % 3;
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <modo_actual>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 37 04 	call	0x86e	; 0x86e <__divmodhi4>
 206:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <modo_actual>
 20a:	08 95       	ret

0000020c <main>:



int main(void)
{
	setup();
 20c:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	initADC();
 210:	0e 94 5d 00 	call	0xba	; 0xba <initADC>
	PWM_init();
 214:	0e 94 92 00 	call	0x124	; 0x124 <PWM_init>
	PWM_init2();
 218:	0e 94 a6 00 	call	0x14c	; 0x14c <PWM_init2>
	PWM_init0();
 21c:	0e 94 b7 00 	call	0x16e	; 0x16e <PWM_init0>
	
    while (1) 
    {
		//EJE X  --- ADC 6
		// EJE Y --- ADC 7 
		cambiar_modo();
 220:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambiar_modo>
		
		switch(modo_actual){
 224:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <modo_actual>
 228:	88 23       	and	r24, r24
 22a:	21 f0       	breq	.+8      	; 0x234 <main+0x28>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	09 f4       	brne	.+2      	; 0x232 <main+0x26>
 230:	ed c0       	rjmp	.+474    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 232:	f6 cf       	rjmp	.-20     	; 0x220 <main+0x14>
			case MODO_FISICO:
			{  
				uint16_t servo1 = leerADC(6);
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t angle = (servo1 * -1.96) + 2100.0;
 23a:	bc 01       	movw	r22, r24
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 244:	28 e4       	ldi	r18, 0x48	; 72
 246:	31 ee       	ldi	r19, 0xE1	; 225
 248:	4a ef       	ldi	r20, 0xFA	; 250
 24a:	5f eb       	ldi	r21, 0xBF	; 191
 24c:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e4       	ldi	r19, 0x40	; 64
 254:	43 e0       	ldi	r20, 0x03	; 3
 256:	55 e4       	ldi	r21, 0x45	; 69
 258:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 25c:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle(angle);
 260:	cb 01       	movw	r24, r22
 262:	0e 94 c4 00 	call	0x188	; 0x188 <PWM_setAngle>
				
				uint16_t servo2 = leerADC(6);
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t mov = (servo2 * 1.96) + 1199.0;
 26c:	bc 01       	movw	r22, r24
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 276:	28 e4       	ldi	r18, 0x48	; 72
 278:	31 ee       	ldi	r19, 0xE1	; 225
 27a:	4a ef       	ldi	r20, 0xFA	; 250
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 ee       	ldi	r19, 0xE0	; 224
 286:	45 e9       	ldi	r20, 0x95	; 149
 288:	54 e4       	ldi	r21, 0x44	; 68
 28a:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 28e:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle2(mov);
 292:	cb 01       	movw	r24, r22
 294:	0e 94 c9 00 	call	0x192	; 0x192 <PWM_setAngle2>
				
				uint16_t lol = leerADC(6);
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t tung = (lol * 0.0137) + 9;
 29e:	bc 01       	movw	r22, r24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 2a8:	27 ef       	ldi	r18, 0xF7	; 247
 2aa:	35 e7       	ldi	r19, 0x75	; 117
 2ac:	40 e6       	ldi	r20, 0x60	; 96
 2ae:	5c e3       	ldi	r21, 0x3C	; 60
 2b0:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e1       	ldi	r20, 0x10	; 16
 2ba:	51 e4       	ldi	r21, 0x41	; 65
 2bc:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 2c0:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle3(tung);
 2c4:	cb 01       	movw	r24, r22
 2c6:	0e 94 ce 00 	call	0x19c	; 0x19c <PWM_setAngle3>
				
				uint16_t caifanes = leerADC(7);
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t cerati = (caifanes * 0.00684) + 9;
 2d0:	bc 01       	movw	r22, r24
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 2da:	24 e1       	ldi	r18, 0x14	; 20
 2dc:	32 e2       	ldi	r19, 0x22	; 34
 2de:	40 ee       	ldi	r20, 0xE0	; 224
 2e0:	5b e3       	ldi	r21, 0x3B	; 59
 2e2:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e1       	ldi	r20, 0x10	; 16
 2ec:	51 e4       	ldi	r21, 0x41	; 65
 2ee:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 2f2:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle4(cerati);
 2f6:	cb 01       	movw	r24, r22
 2f8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <PWM_setAngle4>
				
				uint16_t cejas = leerADC(0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t angle5 = (cejas * 0.0039) + 9;
 302:	bc 01       	movw	r22, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 30c:	24 e2       	ldi	r18, 0x24	; 36
 30e:	37 e9       	ldi	r19, 0x97	; 151
 310:	4f e7       	ldi	r20, 0x7F	; 127
 312:	5b e3       	ldi	r21, 0x3B	; 59
 314:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e1       	ldi	r20, 0x10	; 16
 31e:	51 e4       	ldi	r21, 0x41	; 65
 320:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 324:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle5(angle5);
 328:	cb 01       	movw	r24, r22
 32a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <PWM_setAngle5>
				
				uint16_t cejas2 = leerADC(0);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 7d 00 	call	0xfa	; 0xfa <leerADC>
				uint16_t angle6 = (cejas2 * -0.0039) + 13;
 334:	bc 01       	movw	r22, r24
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 3c 03 	call	0x678	; 0x678 <__floatunsisf>
 33e:	24 e2       	ldi	r18, 0x24	; 36
 340:	37 e9       	ldi	r19, 0x97	; 151
 342:	4f e7       	ldi	r20, 0x7F	; 127
 344:	5b eb       	ldi	r21, 0xBB	; 187
 346:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	40 e5       	ldi	r20, 0x50	; 80
 350:	51 e4       	ldi	r21, 0x41	; 65
 352:	0e 94 a1 02 	call	0x542	; 0x542 <__addsf3>
 356:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
				PWM_setAngle6(angle6);
 35a:	cb 01       	movw	r24, r22
 35c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PWM_setAngle6>
				
				if(escribir == 1 && paqueton <=5)
 360:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <escribir>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	09 f0       	breq	.+2      	; 0x36a <main+0x15e>
 368:	5b cf       	rjmp	.-330    	; 0x220 <main+0x14>
 36a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <paqueton>
 36e:	86 30       	cpi	r24, 0x06	; 6
 370:	08 f0       	brcs	.+2      	; 0x374 <main+0x168>
 372:	56 cf       	rjmp	.-340    	; 0x220 <main+0x14>
				{
					//servo 1
					writeEEPROM(OCR1A, direccion++);
 374:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	86 0f       	add	r24, r22
 37c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 380:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 384:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					//servo 2
					writeEEPROM(OCR1B, direccion++);
 38e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	86 0f       	add	r24, r22
 396:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 39a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 39e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					//servo 3
					writeEEPROM(OCR2A, direccion++);
 3a8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	86 0f       	add	r24, r22
 3b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 3b4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					//servo 4
					writeEEPROM(OCR2B, direccion++);
 3be:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	86 0f       	add	r24, r22
 3c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 3ca:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					//servo 5
					writeEEPROM(OCR0A, direccion++);
 3d4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	86 0f       	add	r24, r22
 3dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 3e0:	87 b5       	in	r24, 0x27	; 39
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					//servo 6
					writeEEPROM(OCR0B, direccion++);
 3e8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <direccion>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	86 0f       	add	r24, r22
 3f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direccion>
 3f4:	88 b5       	in	r24, 0x28	; 40
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 48 00 	call	0x90	; 0x90 <writeEEPROM>
					paqueton++;
 3fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <paqueton>
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <paqueton>
					escribir = 0;
 406:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <escribir>
 40a:	0a cf       	rjmp	.-492    	; 0x220 <main+0x14>
				
				break;  
			}
			case MODO_EPROM:
			
			if (escribir >= 1 && escribir <= 4){
 40c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <escribir>
 410:	9f ef       	ldi	r25, 0xFF	; 255
 412:	98 0f       	add	r25, r24
 414:	94 30       	cpi	r25, 0x04	; 4
 416:	08 f0       	brcs	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	03 cf       	rjmp	.-506    	; 0x220 <main+0x14>
				
				uint8_t paquetito = (escribir - 1)* 6;
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	98 2f       	mov	r25, r24
 420:	99 0f       	add	r25, r25
 422:	89 0f       	add	r24, r25
 424:	c8 2f       	mov	r28, r24
 426:	cc 0f       	add	r28, r28
				
				OCR1A = readEEPROM( paquetito);
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	ce 01       	movw	r24, r28
 42c:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 436:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = readEEPROM(paquetito + 1);
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 448:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = readEEPROM(paquetito + 2);
 44c:	ce 01       	movw	r24, r28
 44e:	02 96       	adiw	r24, 0x02	; 2
 450:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 454:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				OCR2B = readEEPROM(paquetito + 3);
 458:	ce 01       	movw	r24, r28
 45a:	03 96       	adiw	r24, 0x03	; 3
 45c:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 460:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				OCR0A = readEEPROM(paquetito + 4);
 464:	ce 01       	movw	r24, r28
 466:	04 96       	adiw	r24, 0x04	; 4
 468:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 46c:	87 bd       	out	0x27, r24	; 39
				OCR0B = readEEPROM(paquetito + 5);
 46e:	ce 01       	movw	r24, r28
 470:	05 96       	adiw	r24, 0x05	; 5
 472:	0e 94 54 00 	call	0xa8	; 0xa8 <readEEPROM>
 476:	88 bd       	out	0x28, r24	; 40
 478:	d3 ce       	rjmp	.-602    	; 0x220 <main+0x14>

0000047a <__vector_18>:
		modo_actual = (modo_actual + 1) % 3;
	}
}

//Interrupciones 
ISR(USART_RX_vect) {
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	received_char = UDR0; // Leer carácter recibido
 49c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <received_char>
	new_data = 1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	writeChar(received_char);
 4aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <received_char>
 4ae:	0e 94 99 02 	call	0x532	; 0x532 <writeChar>
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_5>:

ISR(PCINT2_vect){
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	8f 93       	push	r24
	PORTB |= (1 << PORTB5);
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	85 b9       	out	0x05, r24	; 5
	
	if (!(PIND & (1 << PORTD7))){
 4e6:	4f 99       	sbic	0x09, 7	; 9
 4e8:	09 c0       	rjmp	.+18     	; 0x4fc <__vector_5+0x28>
		escribir++;
 4ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <escribir>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <escribir>
		if (escribir == 5)
 4f4:	85 30       	cpi	r24, 0x05	; 5
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__vector_5+0x28>
		{
			escribir = 0;
 4f8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <escribir>
		
	}

	
	
 4fc:	8f 91       	pop	r24
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <initUART>:
 *  Author: dulce
 */ 
#include "UART.h"
void initUART() {
	// P1: Configurar PD1 (TX) como salida y PD0 (RX) como entrada
	DDRD |= (1 << DDD1); // TX (Salida)
 508:	8a b1       	in	r24, 0x0a	; 10
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX (Entrada)
 50e:	8a b1       	in	r24, 0x0a	; 10
 510:	8e 7f       	andi	r24, 0xFE	; 254
 512:	8a b9       	out	0x0a, r24	; 10
	
	// P2: Configurar UCSR0A (Modo normal)
	UCSR0A = 0;
 514:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	// P3: Habilitar TX, RX e interrupción por RX
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 518:	88 e9       	ldi	r24, 0x98	; 152
 51a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// P4: Configurar formato: 8 bits, sin paridad, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 51e:	86 e0       	ldi	r24, 0x06	; 6
 520:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// P5: Baud rate a 9600 (@16MHz)
	UBRR0 = 103;
 524:	87 e6       	ldi	r24, 0x67	; 103
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 52c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 530:	08 95       	ret

00000532 <writeChar>:
}

void writeChar(char caracter) {
	while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
 532:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 536:	95 ff       	sbrs	r25, 5
 538:	fc cf       	rjmp	.-8      	; 0x532 <writeChar>
	UDR0 = caracter; // Enviar carácter
 53a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 53e:	08 95       	ret

00000540 <__subsf3>:
 540:	50 58       	subi	r21, 0x80	; 128

00000542 <__addsf3>:
 542:	bb 27       	eor	r27, r27
 544:	aa 27       	eor	r26, r26
 546:	0e 94 b8 02 	call	0x570	; 0x570 <__addsf3x>
 54a:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 54e:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 552:	38 f0       	brcs	.+14     	; 0x562 <__addsf3+0x20>
 554:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 558:	20 f0       	brcs	.+8      	; 0x562 <__addsf3+0x20>
 55a:	39 f4       	brne	.+14     	; 0x56a <__addsf3+0x28>
 55c:	9f 3f       	cpi	r25, 0xFF	; 255
 55e:	19 f4       	brne	.+6      	; 0x566 <__addsf3+0x24>
 560:	26 f4       	brtc	.+8      	; 0x56a <__addsf3+0x28>
 562:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 566:	0e f4       	brtc	.+2      	; 0x56a <__addsf3+0x28>
 568:	e0 95       	com	r30
 56a:	e7 fb       	bst	r30, 7
 56c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>

00000570 <__addsf3x>:
 570:	e9 2f       	mov	r30, r25
 572:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 576:	58 f3       	brcs	.-42     	; 0x54e <__addsf3+0xc>
 578:	ba 17       	cp	r27, r26
 57a:	62 07       	cpc	r22, r18
 57c:	73 07       	cpc	r23, r19
 57e:	84 07       	cpc	r24, r20
 580:	95 07       	cpc	r25, r21
 582:	20 f0       	brcs	.+8      	; 0x58c <__addsf3x+0x1c>
 584:	79 f4       	brne	.+30     	; 0x5a4 <__addsf3x+0x34>
 586:	a6 f5       	brtc	.+104    	; 0x5f0 <__addsf3x+0x80>
 588:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 58c:	0e f4       	brtc	.+2      	; 0x590 <__addsf3x+0x20>
 58e:	e0 95       	com	r30
 590:	0b 2e       	mov	r0, r27
 592:	ba 2f       	mov	r27, r26
 594:	a0 2d       	mov	r26, r0
 596:	0b 01       	movw	r0, r22
 598:	b9 01       	movw	r22, r18
 59a:	90 01       	movw	r18, r0
 59c:	0c 01       	movw	r0, r24
 59e:	ca 01       	movw	r24, r20
 5a0:	a0 01       	movw	r20, r0
 5a2:	11 24       	eor	r1, r1
 5a4:	ff 27       	eor	r31, r31
 5a6:	59 1b       	sub	r21, r25
 5a8:	99 f0       	breq	.+38     	; 0x5d0 <__addsf3x+0x60>
 5aa:	59 3f       	cpi	r21, 0xF9	; 249
 5ac:	50 f4       	brcc	.+20     	; 0x5c2 <__addsf3x+0x52>
 5ae:	50 3e       	cpi	r21, 0xE0	; 224
 5b0:	68 f1       	brcs	.+90     	; 0x60c <__addsf3x+0x9c>
 5b2:	1a 16       	cp	r1, r26
 5b4:	f0 40       	sbci	r31, 0x00	; 0
 5b6:	a2 2f       	mov	r26, r18
 5b8:	23 2f       	mov	r18, r19
 5ba:	34 2f       	mov	r19, r20
 5bc:	44 27       	eor	r20, r20
 5be:	58 5f       	subi	r21, 0xF8	; 248
 5c0:	f3 cf       	rjmp	.-26     	; 0x5a8 <__addsf3x+0x38>
 5c2:	46 95       	lsr	r20
 5c4:	37 95       	ror	r19
 5c6:	27 95       	ror	r18
 5c8:	a7 95       	ror	r26
 5ca:	f0 40       	sbci	r31, 0x00	; 0
 5cc:	53 95       	inc	r21
 5ce:	c9 f7       	brne	.-14     	; 0x5c2 <__addsf3x+0x52>
 5d0:	7e f4       	brtc	.+30     	; 0x5f0 <__addsf3x+0x80>
 5d2:	1f 16       	cp	r1, r31
 5d4:	ba 0b       	sbc	r27, r26
 5d6:	62 0b       	sbc	r22, r18
 5d8:	73 0b       	sbc	r23, r19
 5da:	84 0b       	sbc	r24, r20
 5dc:	ba f0       	brmi	.+46     	; 0x60c <__addsf3x+0x9c>
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	a1 f0       	breq	.+40     	; 0x60a <__addsf3x+0x9a>
 5e2:	ff 0f       	add	r31, r31
 5e4:	bb 1f       	adc	r27, r27
 5e6:	66 1f       	adc	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	c2 f7       	brpl	.-16     	; 0x5de <__addsf3x+0x6e>
 5ee:	0e c0       	rjmp	.+28     	; 0x60c <__addsf3x+0x9c>
 5f0:	ba 0f       	add	r27, r26
 5f2:	62 1f       	adc	r22, r18
 5f4:	73 1f       	adc	r23, r19
 5f6:	84 1f       	adc	r24, r20
 5f8:	48 f4       	brcc	.+18     	; 0x60c <__addsf3x+0x9c>
 5fa:	87 95       	ror	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f7 95       	ror	r31
 604:	9e 3f       	cpi	r25, 0xFE	; 254
 606:	08 f0       	brcs	.+2      	; 0x60a <__addsf3x+0x9a>
 608:	b0 cf       	rjmp	.-160    	; 0x56a <__addsf3+0x28>
 60a:	93 95       	inc	r25
 60c:	88 0f       	add	r24, r24
 60e:	08 f0       	brcs	.+2      	; 0x612 <__addsf3x+0xa2>
 610:	99 27       	eor	r25, r25
 612:	ee 0f       	add	r30, r30
 614:	97 95       	ror	r25
 616:	87 95       	ror	r24
 618:	08 95       	ret

0000061a <__fixunssfsi>:
 61a:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_splitA>
 61e:	88 f0       	brcs	.+34     	; 0x642 <__fixunssfsi+0x28>
 620:	9f 57       	subi	r25, 0x7F	; 127
 622:	98 f0       	brcs	.+38     	; 0x64a <__fixunssfsi+0x30>
 624:	b9 2f       	mov	r27, r25
 626:	99 27       	eor	r25, r25
 628:	b7 51       	subi	r27, 0x17	; 23
 62a:	b0 f0       	brcs	.+44     	; 0x658 <__fixunssfsi+0x3e>
 62c:	e1 f0       	breq	.+56     	; 0x666 <__fixunssfsi+0x4c>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	1a f0       	brmi	.+6      	; 0x63e <__fixunssfsi+0x24>
 638:	ba 95       	dec	r27
 63a:	c9 f7       	brne	.-14     	; 0x62e <__fixunssfsi+0x14>
 63c:	14 c0       	rjmp	.+40     	; 0x666 <__fixunssfsi+0x4c>
 63e:	b1 30       	cpi	r27, 0x01	; 1
 640:	91 f0       	breq	.+36     	; 0x666 <__fixunssfsi+0x4c>
 642:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_zero>
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	08 95       	ret
 64a:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 64e:	67 2f       	mov	r22, r23
 650:	78 2f       	mov	r23, r24
 652:	88 27       	eor	r24, r24
 654:	b8 5f       	subi	r27, 0xF8	; 248
 656:	39 f0       	breq	.+14     	; 0x666 <__fixunssfsi+0x4c>
 658:	b9 3f       	cpi	r27, 0xF9	; 249
 65a:	cc f3       	brlt	.-14     	; 0x64e <__fixunssfsi+0x34>
 65c:	86 95       	lsr	r24
 65e:	77 95       	ror	r23
 660:	67 95       	ror	r22
 662:	b3 95       	inc	r27
 664:	d9 f7       	brne	.-10     	; 0x65c <__fixunssfsi+0x42>
 666:	3e f4       	brtc	.+14     	; 0x676 <__fixunssfsi+0x5c>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__floatunsisf>:
 678:	e8 94       	clt
 67a:	09 c0       	rjmp	.+18     	; 0x68e <__floatsisf+0x12>

0000067c <__floatsisf>:
 67c:	97 fb       	bst	r25, 7
 67e:	3e f4       	brtc	.+14     	; 0x68e <__floatsisf+0x12>
 680:	90 95       	com	r25
 682:	80 95       	com	r24
 684:	70 95       	com	r23
 686:	61 95       	neg	r22
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	99 23       	and	r25, r25
 690:	a9 f0       	breq	.+42     	; 0x6bc <__floatsisf+0x40>
 692:	f9 2f       	mov	r31, r25
 694:	96 e9       	ldi	r25, 0x96	; 150
 696:	bb 27       	eor	r27, r27
 698:	93 95       	inc	r25
 69a:	f6 95       	lsr	r31
 69c:	87 95       	ror	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b7 95       	ror	r27
 6a4:	f1 11       	cpse	r31, r1
 6a6:	f8 cf       	rjmp	.-16     	; 0x698 <__floatsisf+0x1c>
 6a8:	fa f4       	brpl	.+62     	; 0x6e8 <__floatsisf+0x6c>
 6aa:	bb 0f       	add	r27, r27
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__floatsisf+0x36>
 6ae:	60 ff       	sbrs	r22, 0
 6b0:	1b c0       	rjmp	.+54     	; 0x6e8 <__floatsisf+0x6c>
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <__floatsisf+0x6c>
 6bc:	88 23       	and	r24, r24
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__floatsisf+0x48>
 6c0:	96 e9       	ldi	r25, 0x96	; 150
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <__floatsisf+0x6a>
 6c4:	77 23       	and	r23, r23
 6c6:	21 f0       	breq	.+8      	; 0x6d0 <__floatsisf+0x54>
 6c8:	9e e8       	ldi	r25, 0x8E	; 142
 6ca:	87 2f       	mov	r24, r23
 6cc:	76 2f       	mov	r23, r22
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <__floatsisf+0x5e>
 6d0:	66 23       	and	r22, r22
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__floatsisf+0x74>
 6d4:	96 e8       	ldi	r25, 0x86	; 134
 6d6:	86 2f       	mov	r24, r22
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	2a f0       	brmi	.+10     	; 0x6e8 <__floatsisf+0x6c>
 6de:	9a 95       	dec	r25
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	da f7       	brpl	.-10     	; 0x6de <__floatsisf+0x62>
 6e8:	88 0f       	add	r24, r24
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret

000006f2 <__fp_inf>:
 6f2:	97 f9       	bld	r25, 7
 6f4:	9f 67       	ori	r25, 0x7F	; 127
 6f6:	80 e8       	ldi	r24, 0x80	; 128
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	08 95       	ret

000006fe <__fp_nan>:
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	08 95       	ret

00000704 <__fp_pscA>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	09 06       	cpc	r0, r25
 710:	08 95       	ret

00000712 <__fp_pscB>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	05 06       	cpc	r0, r21
 71e:	08 95       	ret

00000720 <__fp_round>:
 720:	09 2e       	mov	r0, r25
 722:	03 94       	inc	r0
 724:	00 0c       	add	r0, r0
 726:	11 f4       	brne	.+4      	; 0x72c <__fp_round+0xc>
 728:	88 23       	and	r24, r24
 72a:	52 f0       	brmi	.+20     	; 0x740 <__fp_round+0x20>
 72c:	bb 0f       	add	r27, r27
 72e:	40 f4       	brcc	.+16     	; 0x740 <__fp_round+0x20>
 730:	bf 2b       	or	r27, r31
 732:	11 f4       	brne	.+4      	; 0x738 <__fp_round+0x18>
 734:	60 ff       	sbrs	r22, 0
 736:	04 c0       	rjmp	.+8      	; 0x740 <__fp_round+0x20>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__fp_split3>:
 742:	57 fd       	sbrc	r21, 7
 744:	90 58       	subi	r25, 0x80	; 128
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	59 f0       	breq	.+22     	; 0x762 <__fp_splitA+0x10>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	71 f0       	breq	.+28     	; 0x76c <__fp_splitA+0x1a>
 750:	47 95       	ror	r20

00000752 <__fp_splitA>:
 752:	88 0f       	add	r24, r24
 754:	97 fb       	bst	r25, 7
 756:	99 1f       	adc	r25, r25
 758:	61 f0       	breq	.+24     	; 0x772 <__fp_splitA+0x20>
 75a:	9f 3f       	cpi	r25, 0xFF	; 255
 75c:	79 f0       	breq	.+30     	; 0x77c <__fp_splitA+0x2a>
 75e:	87 95       	ror	r24
 760:	08 95       	ret
 762:	12 16       	cp	r1, r18
 764:	13 06       	cpc	r1, r19
 766:	14 06       	cpc	r1, r20
 768:	55 1f       	adc	r21, r21
 76a:	f2 cf       	rjmp	.-28     	; 0x750 <__fp_split3+0xe>
 76c:	46 95       	lsr	r20
 76e:	f1 df       	rcall	.-30     	; 0x752 <__fp_splitA>
 770:	08 c0       	rjmp	.+16     	; 0x782 <__fp_splitA+0x30>
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	99 1f       	adc	r25, r25
 77a:	f1 cf       	rjmp	.-30     	; 0x75e <__fp_splitA+0xc>
 77c:	86 95       	lsr	r24
 77e:	71 05       	cpc	r23, r1
 780:	61 05       	cpc	r22, r1
 782:	08 94       	sec
 784:	08 95       	ret

00000786 <__fp_zero>:
 786:	e8 94       	clt

00000788 <__fp_szero>:
 788:	bb 27       	eor	r27, r27
 78a:	66 27       	eor	r22, r22
 78c:	77 27       	eor	r23, r23
 78e:	cb 01       	movw	r24, r22
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__mulsf3>:
 794:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3x>
 798:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 79c:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 7a0:	38 f0       	brcs	.+14     	; 0x7b0 <__mulsf3+0x1c>
 7a2:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__mulsf3+0x1c>
 7a8:	95 23       	and	r25, r21
 7aa:	11 f0       	breq	.+4      	; 0x7b0 <__mulsf3+0x1c>
 7ac:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 7b0:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 7b4:	11 24       	eor	r1, r1
 7b6:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>

000007ba <__mulsf3x>:
 7ba:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 7be:	70 f3       	brcs	.-36     	; 0x79c <__mulsf3+0x8>

000007c0 <__mulsf3_pse>:
 7c0:	95 9f       	mul	r25, r21
 7c2:	c1 f3       	breq	.-16     	; 0x7b4 <__mulsf3+0x20>
 7c4:	95 0f       	add	r25, r21
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	55 1f       	adc	r21, r21
 7ca:	62 9f       	mul	r22, r18
 7cc:	f0 01       	movw	r30, r0
 7ce:	72 9f       	mul	r23, r18
 7d0:	bb 27       	eor	r27, r27
 7d2:	f0 0d       	add	r31, r0
 7d4:	b1 1d       	adc	r27, r1
 7d6:	63 9f       	mul	r22, r19
 7d8:	aa 27       	eor	r26, r26
 7da:	f0 0d       	add	r31, r0
 7dc:	b1 1d       	adc	r27, r1
 7de:	aa 1f       	adc	r26, r26
 7e0:	64 9f       	mul	r22, r20
 7e2:	66 27       	eor	r22, r22
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	66 1f       	adc	r22, r22
 7ea:	82 9f       	mul	r24, r18
 7ec:	22 27       	eor	r18, r18
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 9f       	mul	r23, r19
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	62 1f       	adc	r22, r18
 7fc:	83 9f       	mul	r24, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	22 1f       	adc	r18, r18
 804:	74 9f       	mul	r23, r20
 806:	33 27       	eor	r19, r19
 808:	a0 0d       	add	r26, r0
 80a:	61 1d       	adc	r22, r1
 80c:	23 1f       	adc	r18, r19
 80e:	84 9f       	mul	r24, r20
 810:	60 0d       	add	r22, r0
 812:	21 1d       	adc	r18, r1
 814:	82 2f       	mov	r24, r18
 816:	76 2f       	mov	r23, r22
 818:	6a 2f       	mov	r22, r26
 81a:	11 24       	eor	r1, r1
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	9a f0       	brmi	.+38     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 822:	f1 f0       	breq	.+60     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 824:	88 23       	and	r24, r24
 826:	4a f0       	brmi	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	91 50       	subi	r25, 0x01	; 1
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	a9 f7       	brne	.-22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 83a:	9e 3f       	cpi	r25, 0xFE	; 254
 83c:	51 05       	cpc	r21, r1
 83e:	80 f0       	brcs	.+32     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 840:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 844:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	e4 f3       	brlt	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	98 3e       	cpi	r25, 0xE8	; 232
 84e:	d4 f3       	brlt	.-12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 850:	86 95       	lsr	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	e7 95       	ror	r30
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c1 f7       	brne	.-16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 860:	fe 2b       	or	r31, r30
 862:	88 0f       	add	r24, r24
 864:	91 1d       	adc	r25, r1
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__divmodhi4>:
 86e:	97 fb       	bst	r25, 7
 870:	07 2e       	mov	r0, r23
 872:	16 f4       	brtc	.+4      	; 0x878 <__divmodhi4+0xa>
 874:	00 94       	com	r0
 876:	07 d0       	rcall	.+14     	; 0x886 <__divmodhi4_neg1>
 878:	77 fd       	sbrc	r23, 7
 87a:	09 d0       	rcall	.+18     	; 0x88e <__divmodhi4_neg2>
 87c:	0e 94 4b 04 	call	0x896	; 0x896 <__udivmodhi4>
 880:	07 fc       	sbrc	r0, 7
 882:	05 d0       	rcall	.+10     	; 0x88e <__divmodhi4_neg2>
 884:	3e f4       	brtc	.+14     	; 0x894 <__divmodhi4_exit>

00000886 <__divmodhi4_neg1>:
 886:	90 95       	com	r25
 888:	81 95       	neg	r24
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__divmodhi4_neg2>:
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255

00000894 <__divmodhi4_exit>:
 894:	08 95       	ret

00000896 <__udivmodhi4>:
 896:	aa 1b       	sub	r26, r26
 898:	bb 1b       	sub	r27, r27
 89a:	51 e1       	ldi	r21, 0x11	; 17
 89c:	07 c0       	rjmp	.+14     	; 0x8ac <__udivmodhi4_ep>

0000089e <__udivmodhi4_loop>:
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	a6 17       	cp	r26, r22
 8a4:	b7 07       	cpc	r27, r23
 8a6:	10 f0       	brcs	.+4      	; 0x8ac <__udivmodhi4_ep>
 8a8:	a6 1b       	sub	r26, r22
 8aa:	b7 0b       	sbc	r27, r23

000008ac <__udivmodhi4_ep>:
 8ac:	88 1f       	adc	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	5a 95       	dec	r21
 8b2:	a9 f7       	brne	.-22     	; 0x89e <__udivmodhi4_loop>
 8b4:	80 95       	com	r24
 8b6:	90 95       	com	r25
 8b8:	bc 01       	movw	r22, r24
 8ba:	cd 01       	movw	r24, r26
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
