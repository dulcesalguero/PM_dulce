
proyectooo_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c8  00800100  000009f4  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002c8  008002c8  00000c50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001112  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d3  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ad  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00003154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057f  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  000038e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  9e:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeEEPROM>:
 */ 
#include "EPROM.h"

void writeEEPROM(uint8_t dato, uint16_t direcc)
{
	while (EECR &(1<<EEPE));
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <writeEEPROM>
	EEAR = direcc;
  aa:	72 bd       	out	0x22, r23	; 34
  ac:	61 bd       	out	0x21, r22	; 33
	EEDR = dato;
  ae:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <readEEPROM>:
	
}

uint8_t readEEPROM(uint16_t direcc)
{
	while (EECR &(1<<EEPE));
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM>
	EEAR = direcc;
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
	
  ce:	08 95       	ret

000000d0 <initADC>:
}

//subrutinas

void initADC(){
	ADMUX = (1 << REFS0); // Referencia AVcc
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, preescalador 128
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	08 95       	ret

000000de <setup>:
}

void setup()
{
	cli();
  de:	f8 94       	cli
	DDRC = 0x00;
  e0:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PORTD2) |(1 << PORTD7) ;  // D2 como entrada
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	84 68       	ori	r24, 0x84	; 132
  ec:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD2) | (1 << PORTD7);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	84 68       	ori	r24, 0x84	; 132
  f2:	8b b9       	out	0x0b, r24	; 11
	

	
	// PIN CHANGE EN D7
	PCMSK2 |= (1 << PIND7);
  f4:	ed e6       	ldi	r30, 0x6D	; 109
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
  fe:	e8 e6       	ldi	r30, 0x68	; 104
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
	
	initUART();	
 108:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <initUART>
	sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <leerADC>:
	
}


uint16_t leerADC(uint8_t canal) {
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0F); // Seleccionar canal
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	89 2b       	or	r24, r25
 11c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 128:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 12c:	86 fd       	sbrc	r24, 6
 12e:	fc cf       	rjmp	.-8      	; 0x128 <leerADC+0x18>
	return ADC; //
 130:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 134:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 138:	08 95       	ret

0000013a <PWM_init>:


void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A |= (1 << COM1A1) | (1 << WGM11) | (1 << COM1B1);
 13a:	e0 e8       	ldi	r30, 0x80	; 128
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 6a       	ori	r24, 0xA2	; 162
 142:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
 144:	e1 e8       	ldi	r30, 0x81	; 129
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8a 61       	ori	r24, 0x1A	; 26
 14c:	80 83       	st	Z, r24

	ICR1 = 65000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
 14e:	88 ee       	ldi	r24, 0xE8	; 232
 150:	9d ef       	ldi	r25, 0xFD	; 253
 152:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 156:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << PORTB1) | (1 << PORTB2); // OC1A (D9) como salida
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	84 b9       	out	0x04, r24	; 4
 160:	08 95       	ret

00000162 <PWM_init2>:
}

void PWM_init2() {
	// Configurar Timer2 para modo FASAT PWM PWM con TOP=0xFF
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21); // Non-inverting en ambos canales
 162:	e0 eb       	ldi	r30, 0xB0	; 176
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	83 6a       	ori	r24, 0xA3	; 163
 16a:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler de 1024 (ajustar según necesidades)
 16c:	e1 eb       	ldi	r30, 0xB1	; 177
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	87 60       	ori	r24, 0x07	; 7
 174:	80 83       	st	Z, r24

	DDRD |= (1 << PORTD3); // OC2B (PD3) como salida
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB3);  // OC2A (PB3) como salida (en la mayoría de los ATmega)
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	84 b9       	out	0x04, r24	; 4
 182:	08 95       	ret

00000184 <PWM_init0>:
}


void PWM_init0() {
	// Configurar Timer2 para modo FAST PWM top 0xFF
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01); // Non-inverting en ambos canales
 184:	84 b5       	in	r24, 0x24	; 36
 186:	83 6a       	ori	r24, 0xA3	; 163
 188:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02)  | (1 << CS00); // Prescaler de 1024 (ajustar según necesidades)
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	85 60       	ori	r24, 0x05	; 5
 18e:	85 bd       	out	0x25, r24	; 37

	DDRD |= (1 << PORTD6); // OC0A
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	80 64       	ori	r24, 0x40	; 64
 194:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PORTD5);  // OC0B
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	8a b9       	out	0x0a, r24	; 10
 19c:	08 95       	ret

0000019e <PWM_setAngle>:
}

void PWM_setAngle(uint16_t angle) {
	OCR1A = angle;
 19e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1a6:	08 95       	ret

000001a8 <PWM_setAngle2>:
}
void PWM_setAngle2(uint16_t mov) {
	OCR1B = mov;
 1a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1b0:	08 95       	ret

000001b2 <PWM_setAngle3>:
}
void PWM_setAngle3(uint16_t tung) {
	OCR2A = tung;
 1b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1b6:	08 95       	ret

000001b8 <PWM_setAngle4>:
}
void PWM_setAngle4(uint16_t cerati) {
	OCR2B = cerati;
 1b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 1bc:	08 95       	ret

000001be <PWM_setAngle5>:
}
void PWM_setAngle5(uint16_t angle5) {
	OCR0A = angle5;
 1be:	87 bd       	out	0x27, r24	; 39
 1c0:	08 95       	ret

000001c2 <PWM_setAngle6>:
}
void PWM_setAngle6(uint16_t angle6) {
	OCR0B = angle6;
 1c2:	88 bd       	out	0x28, r24	; 40
 1c4:	08 95       	ret

000001c6 <boton_presionado>:
}

uint8_t boton_presionado() {
	if (!(PIND & (1 << PORTD2))) { // Si el botón está presionado (LOW)
 1c6:	99 b1       	in	r25, 0x09	; 9
 1c8:	89 2f       	mov	r24, r25
 1ca:	84 70       	andi	r24, 0x04	; 4
 1cc:	92 fd       	sbrc	r25, 2
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <boton_presionado+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	39 ef       	ldi	r19, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <boton_presionado+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <boton_presionado+0x1a>
 1e0:	00 00       	nop
		_delay_ms(20);         // Espera para anti-rebote
		if (!(PIND & (1 << PORTD2))) { // Verifica nuevamente
 1e2:	4a 99       	sbic	0x09, 2	; 9
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <boton_presionado+0x26>
			return 1; // Botón realmente presionado
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret
		}
	}
	return 0; // Botón no presionado
 1ea:	80 e0       	ldi	r24, 0x00	; 0
}
 1ec:	08 95       	ret

000001ee <cambiar_modo>:

void cambiar_modo() {
	if (boton_presionado()) {
 1ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <boton_presionado>
 1f2:	88 23       	and	r24, r24
 1f4:	a9 f0       	breq	.+42     	; 0x220 <cambiar_modo+0x32>
		// Espera hasta que se suelte el botón
		while (!(PIND & (1 << PORTD2)));
 1f6:	4a 9b       	sbis	0x09, 2	; 9
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <cambiar_modo+0x8>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <cambiar_modo+0x12>
 208:	00 c0       	rjmp	.+0      	; 0x20a <cambiar_modo+0x1c>
 20a:	00 00       	nop
		_delay_ms(20); // Anti-rebote al soltar
		
		// Cambia al siguiente modo
		modo_actual = (modo_actual + 1) % 3;
 20c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <modo_actual>
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divmodhi4>
 21c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <modo_actual>
 220:	08 95       	ret

00000222 <main>:



int main(void)
{
	setup();
 222:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	initADC();
 226:	0e 94 68 00 	call	0xd0	; 0xd0 <initADC>
	PWM_init();
 22a:	0e 94 9d 00 	call	0x13a	; 0x13a <PWM_init>
	PWM_init2();
 22e:	0e 94 b1 00 	call	0x162	; 0x162 <PWM_init2>
	PWM_init0();
 232:	0e 94 c2 00 	call	0x184	; 0x184 <PWM_init0>
	
    while (1) 
    {
		//EJE X  --- ADC 6
		// EJE Y --- ADC 7 
		cambiar_modo();
 236:	0e 94 f7 00 	call	0x1ee	; 0x1ee <cambiar_modo>
		
		switch(modo_actual){
 23a:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <modo_actual>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	09 f4       	brne	.+2      	; 0x244 <main+0x22>
 242:	f1 c0       	rjmp	.+482    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 244:	20 f0       	brcs	.+8      	; 0x24e <main+0x2c>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	09 f4       	brne	.+2      	; 0x24c <main+0x2a>
 24a:	24 c1       	rjmp	.+584    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 24c:	f4 cf       	rjmp	.-24     	; 0x236 <main+0x14>
			case MODO_FISICO:
			{  
				uint16_t servo1 = leerADC(6);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t angle = (servo1 * -1.96) + 2100.0;
 254:	bc 01       	movw	r22, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 25e:	28 e4       	ldi	r18, 0x48	; 72
 260:	31 ee       	ldi	r19, 0xE1	; 225
 262:	4a ef       	ldi	r20, 0xFA	; 250
 264:	5f eb       	ldi	r21, 0xBF	; 191
 266:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e4       	ldi	r19, 0x40	; 64
 26e:	43 e0       	ldi	r20, 0x03	; 3
 270:	55 e4       	ldi	r21, 0x45	; 69
 272:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 276:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle(angle);
 27a:	cb 01       	movw	r24, r22
 27c:	0e 94 cf 00 	call	0x19e	; 0x19e <PWM_setAngle>
				
				uint16_t servo2 = leerADC(6);
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t mov = (servo2 * 1.96) + 1199.0;
 286:	bc 01       	movw	r22, r24
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 290:	28 e4       	ldi	r18, 0x48	; 72
 292:	31 ee       	ldi	r19, 0xE1	; 225
 294:	4a ef       	ldi	r20, 0xFA	; 250
 296:	5f e3       	ldi	r21, 0x3F	; 63
 298:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 ee       	ldi	r19, 0xE0	; 224
 2a0:	45 e9       	ldi	r20, 0x95	; 149
 2a2:	54 e4       	ldi	r21, 0x44	; 68
 2a4:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 2a8:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle2(mov);
 2ac:	cb 01       	movw	r24, r22
 2ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <PWM_setAngle2>
				
				uint16_t lol = leerADC(6);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t tung = (lol * 0.0137) + 9;
 2b8:	bc 01       	movw	r22, r24
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 2c2:	27 ef       	ldi	r18, 0xF7	; 247
 2c4:	35 e7       	ldi	r19, 0x75	; 117
 2c6:	40 e6       	ldi	r20, 0x60	; 96
 2c8:	5c e3       	ldi	r21, 0x3C	; 60
 2ca:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e1       	ldi	r20, 0x10	; 16
 2d4:	51 e4       	ldi	r21, 0x41	; 65
 2d6:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 2da:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle3(tung);
 2de:	cb 01       	movw	r24, r22
 2e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_setAngle3>
				
				uint16_t caifanes = leerADC(7);
 2e4:	87 e0       	ldi	r24, 0x07	; 7
 2e6:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t cerati = (caifanes * 0.00684) + 9;
 2ea:	bc 01       	movw	r22, r24
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 2f4:	24 e1       	ldi	r18, 0x14	; 20
 2f6:	32 e2       	ldi	r19, 0x22	; 34
 2f8:	40 ee       	ldi	r20, 0xE0	; 224
 2fa:	5b e3       	ldi	r21, 0x3B	; 59
 2fc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e1       	ldi	r20, 0x10	; 16
 306:	51 e4       	ldi	r21, 0x41	; 65
 308:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 30c:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle4(cerati);
 310:	cb 01       	movw	r24, r22
 312:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <PWM_setAngle4>
				
				uint16_t cejas = leerADC(0);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t angle5 = (cejas * 0.0039) + 9;
 31c:	bc 01       	movw	r22, r24
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 326:	24 e2       	ldi	r18, 0x24	; 36
 328:	37 e9       	ldi	r19, 0x97	; 151
 32a:	4f e7       	ldi	r20, 0x7F	; 127
 32c:	5b e3       	ldi	r21, 0x3B	; 59
 32e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e1       	ldi	r20, 0x10	; 16
 338:	51 e4       	ldi	r21, 0x41	; 65
 33a:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 33e:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle5(angle5);
 342:	cb 01       	movw	r24, r22
 344:	0e 94 df 00 	call	0x1be	; 0x1be <PWM_setAngle5>
				
				uint16_t cejas2 = leerADC(0);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 88 00 	call	0x110	; 0x110 <leerADC>
				uint16_t angle6 = (cejas2 * -0.0039) + 13;
 34e:	bc 01       	movw	r22, r24
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatunsisf>
 358:	24 e2       	ldi	r18, 0x24	; 36
 35a:	37 e9       	ldi	r19, 0x97	; 151
 35c:	4f e7       	ldi	r20, 0x7F	; 127
 35e:	5b eb       	ldi	r21, 0xBB	; 187
 360:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__mulsf3>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 e5       	ldi	r20, 0x50	; 80
 36a:	51 e4       	ldi	r21, 0x41	; 65
 36c:	0e 94 3a 03 	call	0x674	; 0x674 <__addsf3>
 370:	0e 94 a6 03 	call	0x74c	; 0x74c <__fixunssfsi>
				PWM_setAngle6(angle6);
 374:	cb 01       	movw	r24, r22
 376:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <PWM_setAngle6>
				
				if(escribir == 1 && paqueton <=5)
 37a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <escribir>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <main+0x162>
 382:	59 cf       	rjmp	.-334    	; 0x236 <main+0x14>
 384:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <paqueton>
 388:	86 30       	cpi	r24, 0x06	; 6
 38a:	08 f0       	brcs	.+2      	; 0x38e <main+0x16c>
 38c:	54 cf       	rjmp	.-344    	; 0x236 <main+0x14>
				{
					//servo 1
					writeEEPROM(OCR1A, direccion++);
 38e:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	86 0f       	add	r24, r22
 396:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 39a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 39e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					//servo 2
					writeEEPROM(OCR1B, direccion++);
 3a8:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	86 0f       	add	r24, r22
 3b0:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 3b4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3b8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					//servo 3
					writeEEPROM(OCR2A, direccion++);
 3c2:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	86 0f       	add	r24, r22
 3ca:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 3ce:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					//servo 4
					writeEEPROM(OCR2B, direccion++);
 3d8:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	86 0f       	add	r24, r22
 3e0:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 3e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					//servo 5
					writeEEPROM(OCR0A, direccion++);
 3ee:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	86 0f       	add	r24, r22
 3f6:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 3fa:	87 b5       	in	r24, 0x27	; 39
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					//servo 6
					writeEEPROM(OCR0B, direccion++);
 402:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <direccion>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	86 0f       	add	r24, r22
 40a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <direccion>
 40e:	88 b5       	in	r24, 0x28	; 40
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
					paqueton++;
 416:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <paqueton>
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <paqueton>
					escribir = 0;
 420:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <escribir>
 424:	08 cf       	rjmp	.-496    	; 0x236 <main+0x14>
				
				break;  
			}
			case MODO_EPROM:
			
			if (escribir >= 1 && escribir <= 4){
 426:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <escribir>
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	98 0f       	add	r25, r24
 42e:	94 30       	cpi	r25, 0x04	; 4
 430:	08 f0       	brcs	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	01 cf       	rjmp	.-510    	; 0x236 <main+0x14>
				
				uint8_t paquetito = (escribir - 1)* 6;
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	98 2f       	mov	r25, r24
 43a:	99 0f       	add	r25, r25
 43c:	89 0f       	add	r24, r25
 43e:	c8 2f       	mov	r28, r24
 440:	cc 0f       	add	r28, r28
				
				OCR1A = readEEPROM( paquetito);
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	ce 01       	movw	r24, r28
 446:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 450:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = readEEPROM(paquetito + 1);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 462:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = readEEPROM(paquetito + 2);
 466:	ce 01       	movw	r24, r28
 468:	02 96       	adiw	r24, 0x02	; 2
 46a:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 46e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				OCR2B = readEEPROM(paquetito + 3);
 472:	ce 01       	movw	r24, r28
 474:	03 96       	adiw	r24, 0x03	; 3
 476:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 47a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				OCR0A = readEEPROM(paquetito + 4);
 47e:	ce 01       	movw	r24, r28
 480:	04 96       	adiw	r24, 0x04	; 4
 482:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 486:	87 bd       	out	0x27, r24	; 39
				OCR0B = readEEPROM(paquetito + 5);
 488:	ce 01       	movw	r24, r28
 48a:	05 96       	adiw	r24, 0x05	; 5
 48c:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 490:	88 bd       	out	0x28, r24	; 40
 492:	d1 ce       	rjmp	.-606    	; 0x236 <main+0x14>
				
			}
			
			break;
			case MODO_SERIAL:
			writeString("\r\nModo SERIAL activado. Listo para comandos.\r\n");
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
			mostrarMenu();
 49c:	0e 94 10 03 	call	0x620	; 0x620 <mostrarMenu>
			
			while (modo_actual == MODO_SERIAL) {
 4a0:	43 c0       	rjmp	.+134    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
				if (new_data) {
 4a2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <__data_end>
 4a6:	88 23       	and	r24, r24
 4a8:	e9 f1       	breq	.+122    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
					switch (received_char){
 4aa:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <received_char>
 4ae:	83 33       	cpi	r24, 0x33	; 51
 4b0:	d9 f0       	breq	.+54     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4b2:	28 f4       	brcc	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	81 33       	cpi	r24, 0x31	; 49
 4b6:	41 f0       	breq	.+16     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b8:	82 33       	cpi	r24, 0x32	; 50
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4bc:	2b c0       	rjmp	.+86     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 4be:	84 33       	cpi	r24, 0x34	; 52
 4c0:	d1 f0       	breq	.+52     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4c2:	85 33       	cpi	r24, 0x35	; 53
 4c4:	f9 f0       	breq	.+62     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4c6:	26 c0       	rjmp	.+76     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
						case '1': // MOVER IZQUIERDA - SERVO6                                               
							OCR2A = 23;
 4c8:	87 e1       	ldi	r24, 0x17	; 23
 4ca:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
							writeString("\r\nGlobo ocular IZQUIERDA\r\n");
 4ce:	8f e2       	ldi	r24, 0x2F	; 47
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
							break; 
 4d6:	22 c0       	rjmp	.+68     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
						case '2': // MOVER DERECHA - SERVO6 
							OCR2A = 9;
 4d8:	89 e0       	ldi	r24, 0x09	; 9
 4da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
							writeString("\r\nGlobo ocular DERECHA\r\n");
 4de:	8a e4       	ldi	r24, 0x4A	; 74
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
							break;
 4e6:	1a c0       	rjmp	.+52     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
						case '3': // CERRAR PÁRPADO IZQUIERDO - SERVO3 
							OCR0A = 9;
 4e8:	89 e0       	ldi	r24, 0x09	; 9
 4ea:	87 bd       	out	0x27, r24	; 39
							writeString("\r\nCerrando párpado IZQUIERDO\r\n");
 4ec:	83 e6       	ldi	r24, 0x63	; 99
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
							break; 
 4f4:	13 c0       	rjmp	.+38     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
						case '4': // CERRAR PÁRPADO DERECHO - SERVO4
							OCR0B = 9; 
 4f6:	89 e0       	ldi	r24, 0x09	; 9
 4f8:	88 bd       	out	0x28, r24	; 40
							writeString("\r\nCerrando párpado DERECHO\r\n");
 4fa:	82 e8       	ldi	r24, 0x82	; 130
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
							break; 
 502:	0c c0       	rjmp	.+24     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
						case '5': // Viendo ABAJO - SSERVO5
							OCR2B = 13; 
 504:	8d e0       	ldi	r24, 0x0D	; 13
 506:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
							writeString("\r\nViendo ABAJO\r\n");
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
							break; 
 512:	04 c0       	rjmp	.+8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
						default:
							writeString("\r\nComando no válido. Intente de nuevo.\r\n");
 514:	80 eb       	ldi	r24, 0xB0	; 176
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
						
							
				
					}
					
					new_data = 0; 
 51c:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <__data_end>
					mostrarMenu(); 
 520:	0e 94 10 03 	call	0x620	; 0x620 <mostrarMenu>
				}
				cambiar_modo(); 
 524:	0e 94 f7 00 	call	0x1ee	; 0x1ee <cambiar_modo>
			break;
			case MODO_SERIAL:
			writeString("\r\nModo SERIAL activado. Listo para comandos.\r\n");
			mostrarMenu();
			
			while (modo_actual == MODO_SERIAL) {
 528:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <modo_actual>
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	09 f4       	brne	.+2      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 530:	b8 cf       	rjmp	.-144    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 532:	81 ce       	rjmp	.-766    	; 0x236 <main+0x14>

00000534 <__vector_18>:
		modo_actual = (modo_actual + 1) % 3;
	}
}

//Interrupciones 
ISR(USART_RX_vect) {
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	received_char = UDR0; // Leer carácter recibido
 556:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 55a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <received_char>
	new_data = 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <__data_end>

	writeChar(received_char);
 564:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <received_char>
 568:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeChar>
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__vector_5>:

ISR(PCINT2_vect){
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	8f 93       	push	r24
	PORTB |= (1 << PORTB5);
 59a:	85 b1       	in	r24, 0x05	; 5
 59c:	80 62       	ori	r24, 0x20	; 32
 59e:	85 b9       	out	0x05, r24	; 5
	
	if (!(PIND & (1 << PORTD7))){
 5a0:	4f 99       	sbic	0x09, 7	; 9
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <__vector_5+0x28>
		escribir++;
 5a4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <escribir>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <escribir>
		if (escribir == 5)
 5ae:	85 30       	cpi	r24, 0x05	; 5
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__vector_5+0x28>
		{
			escribir = 0;
 5b2:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <escribir>
		
	}

	
	
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <initUART>:

#include "UART.h"

void initUART() {
	// P1: Configurar PD1 (TX) como salida y PD0 (RX) como entrada
	DDRD |= (1 << DDD1); // TX (Salida)
 5c2:	8a b1       	in	r24, 0x0a	; 10
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX (Entrada)
 5c8:	8a b1       	in	r24, 0x0a	; 10
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	8a b9       	out	0x0a, r24	; 10
	
	// P2: Configurar UCSR0A (Modo normal)
	UCSR0A = 0;
 5ce:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	// P3: Habilitar TX, RX e interrupción por RX
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 5d2:	88 e9       	ldi	r24, 0x98	; 152
 5d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// P4: Configurar formato: 8 bits, sin paridad, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// P5: Baud rate a 9600 (@16MHz)
	UBRR0 = 103;
 5de:	87 e6       	ldi	r24, 0x67	; 103
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5ea:	08 95       	ret

000005ec <writeChar>:
}

void writeChar(char caracter) {
	while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
 5ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5f0:	95 ff       	sbrs	r25, 5
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <writeChar>
	UDR0 = caracter; // Enviar carácter
 5f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5f8:	08 95       	ret

000005fa <writeString>:
}

void writeString(char*texto){
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; *(texto + i) != '\0'; i++)
 602:	c0 e0       	ldi	r28, 0x00	; 0
 604:	03 c0       	rjmp	.+6      	; 0x60c <writeString+0x12>
	{
		writeChar(*(texto+i));
 606:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeChar>
	while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
	UDR0 = caracter; // Enviar carácter
}

void writeString(char*texto){
	for (uint8_t i = 0; *(texto + i) != '\0'; i++)
 60a:	cf 5f       	subi	r28, 0xFF	; 255
 60c:	f8 01       	movw	r30, r16
 60e:	ec 0f       	add	r30, r28
 610:	f1 1d       	adc	r31, r1
 612:	80 81       	ld	r24, Z
 614:	81 11       	cpse	r24, r1
 616:	f7 cf       	rjmp	.-18     	; 0x606 <writeString+0xc>
	{
		writeChar(*(texto+i));
	}
	
}
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	08 95       	ret

00000620 <mostrarMenu>:

void mostrarMenu() {
	writeString("\r\n--- MENU DE COMANDOS ---\r\n");
 620:	89 ed       	ldi	r24, 0xD9	; 217
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("1:Mover globo ocular ARRIBA\r\n");
 628:	86 ef       	ldi	r24, 0xF6	; 246
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("2:Mover globo ocular ABAJO\r\n");
 630:	84 e1       	ldi	r24, 0x14	; 20
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("3:Mirar IZQUIERDA\r\n");
 638:	81 e3       	ldi	r24, 0x31	; 49
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("4:Mirar DERECHA\r\n");
 640:	85 e4       	ldi	r24, 0x45	; 69
 642:	92 e0       	ldi	r25, 0x02	; 2
 644:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("5:ABRIR parpados\r\n");
 648:	87 e5       	ldi	r24, 0x57	; 87
 64a:	92 e0       	ldi	r25, 0x02	; 2
 64c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("6:CERRAR parpados\r\n");
 650:	8a e6       	ldi	r24, 0x6A	; 106
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("R:RESET (Posicion inicial)\r\n");
 658:	8e e7       	ldi	r24, 0x7E	; 126
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("-----------------------\r\n");
 660:	8b e9       	ldi	r24, 0x9B	; 155
 662:	92 e0       	ldi	r25, 0x02	; 2
 664:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
	writeString("Ingrese comando: ");
 668:	85 eb       	ldi	r24, 0xB5	; 181
 66a:	92 e0       	ldi	r25, 0x02	; 2
 66c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <writeString>
 670:	08 95       	ret

00000672 <__subsf3>:
 672:	50 58       	subi	r21, 0x80	; 128

00000674 <__addsf3>:
 674:	bb 27       	eor	r27, r27
 676:	aa 27       	eor	r26, r26
 678:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__addsf3x>
 67c:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_round>
 680:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscA>
 684:	38 f0       	brcs	.+14     	; 0x694 <__addsf3+0x20>
 686:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscB>
 68a:	20 f0       	brcs	.+8      	; 0x694 <__addsf3+0x20>
 68c:	39 f4       	brne	.+14     	; 0x69c <__addsf3+0x28>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	19 f4       	brne	.+6      	; 0x698 <__addsf3+0x24>
 692:	26 f4       	brtc	.+8      	; 0x69c <__addsf3+0x28>
 694:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_nan>
 698:	0e f4       	brtc	.+2      	; 0x69c <__addsf3+0x28>
 69a:	e0 95       	com	r30
 69c:	e7 fb       	bst	r30, 7
 69e:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_inf>

000006a2 <__addsf3x>:
 6a2:	e9 2f       	mov	r30, r25
 6a4:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_split3>
 6a8:	58 f3       	brcs	.-42     	; 0x680 <__addsf3+0xc>
 6aa:	ba 17       	cp	r27, r26
 6ac:	62 07       	cpc	r22, r18
 6ae:	73 07       	cpc	r23, r19
 6b0:	84 07       	cpc	r24, r20
 6b2:	95 07       	cpc	r25, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__addsf3x+0x1c>
 6b6:	79 f4       	brne	.+30     	; 0x6d6 <__addsf3x+0x34>
 6b8:	a6 f5       	brtc	.+104    	; 0x722 <__addsf3x+0x80>
 6ba:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_zero>
 6be:	0e f4       	brtc	.+2      	; 0x6c2 <__addsf3x+0x20>
 6c0:	e0 95       	com	r30
 6c2:	0b 2e       	mov	r0, r27
 6c4:	ba 2f       	mov	r27, r26
 6c6:	a0 2d       	mov	r26, r0
 6c8:	0b 01       	movw	r0, r22
 6ca:	b9 01       	movw	r22, r18
 6cc:	90 01       	movw	r18, r0
 6ce:	0c 01       	movw	r0, r24
 6d0:	ca 01       	movw	r24, r20
 6d2:	a0 01       	movw	r20, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	ff 27       	eor	r31, r31
 6d8:	59 1b       	sub	r21, r25
 6da:	99 f0       	breq	.+38     	; 0x702 <__addsf3x+0x60>
 6dc:	59 3f       	cpi	r21, 0xF9	; 249
 6de:	50 f4       	brcc	.+20     	; 0x6f4 <__addsf3x+0x52>
 6e0:	50 3e       	cpi	r21, 0xE0	; 224
 6e2:	68 f1       	brcs	.+90     	; 0x73e <__addsf3x+0x9c>
 6e4:	1a 16       	cp	r1, r26
 6e6:	f0 40       	sbci	r31, 0x00	; 0
 6e8:	a2 2f       	mov	r26, r18
 6ea:	23 2f       	mov	r18, r19
 6ec:	34 2f       	mov	r19, r20
 6ee:	44 27       	eor	r20, r20
 6f0:	58 5f       	subi	r21, 0xF8	; 248
 6f2:	f3 cf       	rjmp	.-26     	; 0x6da <__addsf3x+0x38>
 6f4:	46 95       	lsr	r20
 6f6:	37 95       	ror	r19
 6f8:	27 95       	ror	r18
 6fa:	a7 95       	ror	r26
 6fc:	f0 40       	sbci	r31, 0x00	; 0
 6fe:	53 95       	inc	r21
 700:	c9 f7       	brne	.-14     	; 0x6f4 <__addsf3x+0x52>
 702:	7e f4       	brtc	.+30     	; 0x722 <__addsf3x+0x80>
 704:	1f 16       	cp	r1, r31
 706:	ba 0b       	sbc	r27, r26
 708:	62 0b       	sbc	r22, r18
 70a:	73 0b       	sbc	r23, r19
 70c:	84 0b       	sbc	r24, r20
 70e:	ba f0       	brmi	.+46     	; 0x73e <__addsf3x+0x9c>
 710:	91 50       	subi	r25, 0x01	; 1
 712:	a1 f0       	breq	.+40     	; 0x73c <__addsf3x+0x9a>
 714:	ff 0f       	add	r31, r31
 716:	bb 1f       	adc	r27, r27
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	c2 f7       	brpl	.-16     	; 0x710 <__addsf3x+0x6e>
 720:	0e c0       	rjmp	.+28     	; 0x73e <__addsf3x+0x9c>
 722:	ba 0f       	add	r27, r26
 724:	62 1f       	adc	r22, r18
 726:	73 1f       	adc	r23, r19
 728:	84 1f       	adc	r24, r20
 72a:	48 f4       	brcc	.+18     	; 0x73e <__addsf3x+0x9c>
 72c:	87 95       	ror	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b7 95       	ror	r27
 734:	f7 95       	ror	r31
 736:	9e 3f       	cpi	r25, 0xFE	; 254
 738:	08 f0       	brcs	.+2      	; 0x73c <__addsf3x+0x9a>
 73a:	b0 cf       	rjmp	.-160    	; 0x69c <__addsf3+0x28>
 73c:	93 95       	inc	r25
 73e:	88 0f       	add	r24, r24
 740:	08 f0       	brcs	.+2      	; 0x744 <__addsf3x+0xa2>
 742:	99 27       	eor	r25, r25
 744:	ee 0f       	add	r30, r30
 746:	97 95       	ror	r25
 748:	87 95       	ror	r24
 74a:	08 95       	ret

0000074c <__fixunssfsi>:
 74c:	0e 94 42 04 	call	0x884	; 0x884 <__fp_splitA>
 750:	88 f0       	brcs	.+34     	; 0x774 <__fixunssfsi+0x28>
 752:	9f 57       	subi	r25, 0x7F	; 127
 754:	98 f0       	brcs	.+38     	; 0x77c <__fixunssfsi+0x30>
 756:	b9 2f       	mov	r27, r25
 758:	99 27       	eor	r25, r25
 75a:	b7 51       	subi	r27, 0x17	; 23
 75c:	b0 f0       	brcs	.+44     	; 0x78a <__fixunssfsi+0x3e>
 75e:	e1 f0       	breq	.+56     	; 0x798 <__fixunssfsi+0x4c>
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	1a f0       	brmi	.+6      	; 0x770 <__fixunssfsi+0x24>
 76a:	ba 95       	dec	r27
 76c:	c9 f7       	brne	.-14     	; 0x760 <__fixunssfsi+0x14>
 76e:	14 c0       	rjmp	.+40     	; 0x798 <__fixunssfsi+0x4c>
 770:	b1 30       	cpi	r27, 0x01	; 1
 772:	91 f0       	breq	.+36     	; 0x798 <__fixunssfsi+0x4c>
 774:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_zero>
 778:	b1 e0       	ldi	r27, 0x01	; 1
 77a:	08 95       	ret
 77c:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_zero>
 780:	67 2f       	mov	r22, r23
 782:	78 2f       	mov	r23, r24
 784:	88 27       	eor	r24, r24
 786:	b8 5f       	subi	r27, 0xF8	; 248
 788:	39 f0       	breq	.+14     	; 0x798 <__fixunssfsi+0x4c>
 78a:	b9 3f       	cpi	r27, 0xF9	; 249
 78c:	cc f3       	brlt	.-14     	; 0x780 <__fixunssfsi+0x34>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b3 95       	inc	r27
 796:	d9 f7       	brne	.-10     	; 0x78e <__fixunssfsi+0x42>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__fixunssfsi+0x5c>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	08 95       	ret

000007aa <__floatunsisf>:
 7aa:	e8 94       	clt
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <__floatsisf+0x12>

000007ae <__floatsisf>:
 7ae:	97 fb       	bst	r25, 7
 7b0:	3e f4       	brtc	.+14     	; 0x7c0 <__floatsisf+0x12>
 7b2:	90 95       	com	r25
 7b4:	80 95       	com	r24
 7b6:	70 95       	com	r23
 7b8:	61 95       	neg	r22
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	99 23       	and	r25, r25
 7c2:	a9 f0       	breq	.+42     	; 0x7ee <__floatsisf+0x40>
 7c4:	f9 2f       	mov	r31, r25
 7c6:	96 e9       	ldi	r25, 0x96	; 150
 7c8:	bb 27       	eor	r27, r27
 7ca:	93 95       	inc	r25
 7cc:	f6 95       	lsr	r31
 7ce:	87 95       	ror	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b7 95       	ror	r27
 7d6:	f1 11       	cpse	r31, r1
 7d8:	f8 cf       	rjmp	.-16     	; 0x7ca <__floatsisf+0x1c>
 7da:	fa f4       	brpl	.+62     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7dc:	bb 0f       	add	r27, r27
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__floatsisf+0x36>
 7e0:	60 ff       	sbrs	r22, 0
 7e2:	1b c0       	rjmp	.+54     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7e4:	6f 5f       	subi	r22, 0xFF	; 255
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	16 c0       	rjmp	.+44     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ee:	88 23       	and	r24, r24
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <__floatsisf+0x48>
 7f2:	96 e9       	ldi	r25, 0x96	; 150
 7f4:	11 c0       	rjmp	.+34     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f6:	77 23       	and	r23, r23
 7f8:	21 f0       	breq	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	9e e8       	ldi	r25, 0x8E	; 142
 7fc:	87 2f       	mov	r24, r23
 7fe:	76 2f       	mov	r23, r22
 800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 802:	66 23       	and	r22, r22
 804:	71 f0       	breq	.+28     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 806:	96 e8       	ldi	r25, 0x86	; 134
 808:	86 2f       	mov	r24, r22
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	2a f0       	brmi	.+10     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 810:	9a 95       	dec	r25
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	da f7       	brpl	.-10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 81a:	88 0f       	add	r24, r24
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	97 f9       	bld	r25, 7
 822:	08 95       	ret

00000824 <__fp_inf>:
 824:	97 f9       	bld	r25, 7
 826:	9f 67       	ori	r25, 0x7F	; 127
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	08 95       	ret

00000830 <__fp_nan>:
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	08 95       	ret

00000836 <__fp_pscA>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	09 06       	cpc	r0, r25
 842:	08 95       	ret

00000844 <__fp_pscB>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	05 06       	cpc	r0, r21
 850:	08 95       	ret

00000852 <__fp_round>:
 852:	09 2e       	mov	r0, r25
 854:	03 94       	inc	r0
 856:	00 0c       	add	r0, r0
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
 85a:	88 23       	and	r24, r24
 85c:	52 f0       	brmi	.+20     	; 0x872 <__fp_round+0x20>
 85e:	bb 0f       	add	r27, r27
 860:	40 f4       	brcc	.+16     	; 0x872 <__fp_round+0x20>
 862:	bf 2b       	or	r27, r31
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0x18>
 866:	60 ff       	sbrs	r22, 0
 868:	04 c0       	rjmp	.+8      	; 0x872 <__fp_round+0x20>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__fp_split3>:
 874:	57 fd       	sbrc	r21, 7
 876:	90 58       	subi	r25, 0x80	; 128
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	59 f0       	breq	.+22     	; 0x894 <__fp_splitA+0x10>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	71 f0       	breq	.+28     	; 0x89e <__fp_splitA+0x1a>
 882:	47 95       	ror	r20

00000884 <__fp_splitA>:
 884:	88 0f       	add	r24, r24
 886:	97 fb       	bst	r25, 7
 888:	99 1f       	adc	r25, r25
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_splitA+0x20>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	79 f0       	breq	.+30     	; 0x8ae <__fp_splitA+0x2a>
 890:	87 95       	ror	r24
 892:	08 95       	ret
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	55 1f       	adc	r21, r21
 89c:	f2 cf       	rjmp	.-28     	; 0x882 <__fp_split3+0xe>
 89e:	46 95       	lsr	r20
 8a0:	f1 df       	rcall	.-30     	; 0x884 <__fp_splitA>
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__fp_splitA+0x30>
 8a4:	16 16       	cp	r1, r22
 8a6:	17 06       	cpc	r1, r23
 8a8:	18 06       	cpc	r1, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	f1 cf       	rjmp	.-30     	; 0x890 <__fp_splitA+0xc>
 8ae:	86 95       	lsr	r24
 8b0:	71 05       	cpc	r23, r1
 8b2:	61 05       	cpc	r22, r1
 8b4:	08 94       	sec
 8b6:	08 95       	ret

000008b8 <__fp_zero>:
 8b8:	e8 94       	clt

000008ba <__fp_szero>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	66 27       	eor	r22, r22
 8be:	77 27       	eor	r23, r23
 8c0:	cb 01       	movw	r24, r22
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__mulsf3>:
 8c6:	0e 94 76 04 	call	0x8ec	; 0x8ec <__mulsf3x>
 8ca:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_round>
 8ce:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscA>
 8d2:	38 f0       	brcs	.+14     	; 0x8e2 <__mulsf3+0x1c>
 8d4:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscB>
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__mulsf3+0x1c>
 8da:	95 23       	and	r25, r21
 8dc:	11 f0       	breq	.+4      	; 0x8e2 <__mulsf3+0x1c>
 8de:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_inf>
 8e2:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_nan>
 8e6:	11 24       	eor	r1, r1
 8e8:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_szero>

000008ec <__mulsf3x>:
 8ec:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_split3>
 8f0:	70 f3       	brcs	.-36     	; 0x8ce <__mulsf3+0x8>

000008f2 <__mulsf3_pse>:
 8f2:	95 9f       	mul	r25, r21
 8f4:	c1 f3       	breq	.-16     	; 0x8e6 <__mulsf3+0x20>
 8f6:	95 0f       	add	r25, r21
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	55 1f       	adc	r21, r21
 8fc:	62 9f       	mul	r22, r18
 8fe:	f0 01       	movw	r30, r0
 900:	72 9f       	mul	r23, r18
 902:	bb 27       	eor	r27, r27
 904:	f0 0d       	add	r31, r0
 906:	b1 1d       	adc	r27, r1
 908:	63 9f       	mul	r22, r19
 90a:	aa 27       	eor	r26, r26
 90c:	f0 0d       	add	r31, r0
 90e:	b1 1d       	adc	r27, r1
 910:	aa 1f       	adc	r26, r26
 912:	64 9f       	mul	r22, r20
 914:	66 27       	eor	r22, r22
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	66 1f       	adc	r22, r22
 91c:	82 9f       	mul	r24, r18
 91e:	22 27       	eor	r18, r18
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	62 1f       	adc	r22, r18
 926:	73 9f       	mul	r23, r19
 928:	b0 0d       	add	r27, r0
 92a:	a1 1d       	adc	r26, r1
 92c:	62 1f       	adc	r22, r18
 92e:	83 9f       	mul	r24, r19
 930:	a0 0d       	add	r26, r0
 932:	61 1d       	adc	r22, r1
 934:	22 1f       	adc	r18, r18
 936:	74 9f       	mul	r23, r20
 938:	33 27       	eor	r19, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	23 1f       	adc	r18, r19
 940:	84 9f       	mul	r24, r20
 942:	60 0d       	add	r22, r0
 944:	21 1d       	adc	r18, r1
 946:	82 2f       	mov	r24, r18
 948:	76 2f       	mov	r23, r22
 94a:	6a 2f       	mov	r22, r26
 94c:	11 24       	eor	r1, r1
 94e:	9f 57       	subi	r25, 0x7F	; 127
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	9a f0       	brmi	.+38     	; 0x97a <__stack+0x7b>
 954:	f1 f0       	breq	.+60     	; 0x992 <__stack+0x93>
 956:	88 23       	and	r24, r24
 958:	4a f0       	brmi	.+18     	; 0x96c <__stack+0x6d>
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	bb 1f       	adc	r27, r27
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	91 50       	subi	r25, 0x01	; 1
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	a9 f7       	brne	.-22     	; 0x956 <__stack+0x57>
 96c:	9e 3f       	cpi	r25, 0xFE	; 254
 96e:	51 05       	cpc	r21, r1
 970:	80 f0       	brcs	.+32     	; 0x992 <__stack+0x93>
 972:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_inf>
 976:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_szero>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	e4 f3       	brlt	.-8      	; 0x976 <__stack+0x77>
 97e:	98 3e       	cpi	r25, 0xE8	; 232
 980:	d4 f3       	brlt	.-12     	; 0x976 <__stack+0x77>
 982:	86 95       	lsr	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	e7 95       	ror	r30
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	c1 f7       	brne	.-16     	; 0x982 <__stack+0x83>
 992:	fe 2b       	or	r31, r30
 994:	88 0f       	add	r24, r24
 996:	91 1d       	adc	r25, r1
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__divmodhi4>:
 9a0:	97 fb       	bst	r25, 7
 9a2:	07 2e       	mov	r0, r23
 9a4:	16 f4       	brtc	.+4      	; 0x9aa <__divmodhi4+0xa>
 9a6:	00 94       	com	r0
 9a8:	07 d0       	rcall	.+14     	; 0x9b8 <__divmodhi4_neg1>
 9aa:	77 fd       	sbrc	r23, 7
 9ac:	09 d0       	rcall	.+18     	; 0x9c0 <__divmodhi4_neg2>
 9ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodhi4>
 9b2:	07 fc       	sbrc	r0, 7
 9b4:	05 d0       	rcall	.+10     	; 0x9c0 <__divmodhi4_neg2>
 9b6:	3e f4       	brtc	.+14     	; 0x9c6 <__divmodhi4_exit>

000009b8 <__divmodhi4_neg1>:
 9b8:	90 95       	com	r25
 9ba:	81 95       	neg	r24
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__divmodhi4_neg2>:
 9c0:	70 95       	com	r23
 9c2:	61 95       	neg	r22
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255

000009c6 <__divmodhi4_exit>:
 9c6:	08 95       	ret

000009c8 <__udivmodhi4>:
 9c8:	aa 1b       	sub	r26, r26
 9ca:	bb 1b       	sub	r27, r27
 9cc:	51 e1       	ldi	r21, 0x11	; 17
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__udivmodhi4_ep>

000009d0 <__udivmodhi4_loop>:
 9d0:	aa 1f       	adc	r26, r26
 9d2:	bb 1f       	adc	r27, r27
 9d4:	a6 17       	cp	r26, r22
 9d6:	b7 07       	cpc	r27, r23
 9d8:	10 f0       	brcs	.+4      	; 0x9de <__udivmodhi4_ep>
 9da:	a6 1b       	sub	r26, r22
 9dc:	b7 0b       	sbc	r27, r23

000009de <__udivmodhi4_ep>:
 9de:	88 1f       	adc	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	5a 95       	dec	r21
 9e4:	a9 f7       	brne	.-22     	; 0x9d0 <__udivmodhi4_loop>
 9e6:	80 95       	com	r24
 9e8:	90 95       	com	r25
 9ea:	bc 01       	movw	r22, r24
 9ec:	cd 01       	movw	r24, r26
 9ee:	08 95       	ret

000009f0 <_exit>:
 9f0:	f8 94       	cli

000009f2 <__stop_program>:
 9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <__stop_program>
