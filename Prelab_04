/*
* Prelab04.c
 * Universidad del Valle de Guatemala 
 * Progra de Micros 
 * PRE LAB 04 - ADC - 10
 * Author : dulce
 */ 


#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

// Variables globales
volatile uint8_t counter = 0;
volatile uint8_t debounce_counters[2] = {0, 0}; // [0] para PC0, [1] para PC1
volatile uint8_t last_state = 0x03; // Estado previo de los botones

/**************/
// Function prototypes
void setup();
void update_leds();

/**************/
// Main Function
int main(void)
{
    setup();
    
    while (1) 
    {
        // Mantener PB1 encendido y los demás pines de PORTB apagados
        PORTB = (1 << PB1);
    }
}

/**************/
// NON-Interrupt subroutines
void setup()
{
    // 1. Configuración de LEDs
    DDRD = 0xFF;
    PORTD = 0x00;
    
    // 2. Configuración específica para PC0 y PC1
    DDRC &= ~((1 << PC0) | (1 << PC1)); // Entradas
    PORTC |= (1 << PC0) | (1 << PC1);   // Pull-ups activados
    
    // 3. Configuración de PORTB (PB1 encendido, otros apagados)
    DDRB |= (1 << PB1);  // Configurar PB1 como salida
    PORTB = (1 << PB1);  // Encender PB1, apagar los demás
    
    // 4. Timer para antirrebote (~10ms con 16MHz)
    TCCR0A = 0x00;
    TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
    TIMSK0 = (1 << TOIE0);
    
    // 5. Estado inicial
    counter = 0;
    update_leds();
    sei();
}

void update_leds()
{
    PORTD = counter;
}

/**************/
// Interrupt routines
ISR(TIMER0_OVF_vect)
{
    uint8_t current_state = PINC & ((1 << PC0) | (1 << PC1));
    uint8_t changes = current_state ^ last_state;
    last_state = current_state;
    
    // Procesar PC0 (incremento)
    if (!(current_state & (1 << PC0))) {
        debounce_counters[0]++;
        if (debounce_counters[0] >= 5) { // ~50ms debounce
            if (counter < 255) counter++;
            update_leds();
            debounce_counters[0] = 0;
        }
    } else {
        debounce_counters[0] = 0;
    }
    
    // Procesar PC1 (decremento)
    if (!(current_state & (1 << PC1))) {
        debounce_counters[1]++;
        if (debounce_counters[1] >= 5) { // ~50ms debounce
            if (counter > 0) counter--;
            update_leds();
            debounce_counters[1] = 0;
        }
    } else {
        debounce_counters[1] = 0;
    }
}
