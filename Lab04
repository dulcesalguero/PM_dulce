//////// ESTE YA SIRVEEE YEIIIIIIII: falta postlab //////////////
/*
 * Lab04.c - Contador binario + ADC con displays 7 segmentos
 * Universidad del Valle de Guatemala
 * Progra de Micros - 10
 * Dulce Salguero - 231208
 */


#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000

// Variables globales
volatile uint8_t counter = 0;
volatile uint8_t debounce_counters[2] = {0, 0};
volatile uint8_t mux_state = 0;  // 0 = Display ADC alto, 1 = ADC bajo, 2 = LEDs contador
volatile uint8_t adc_value = 0;

// Tabla hex para 7 segmentos
const uint8_t tabla_7seg[16] = {
	0x3F, 0x06, 0x5B, 0x4F,
	0x66, 0x6D, 0x7D, 0x07,
	0x7F, 0x6F, 0x77, 0x7C,
	0x39, 0x5E, 0x79, 0x71
};

void update_leds()
{
	PORTD = counter; // LEDs binarios
}

void initADC()
{
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX2) | (1 << MUX1); // AVcc, just. izq, ADC6
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1) | (1 << ADPS0); // ADC enable + interrupción + prescaler
	ADCSRA |= (1 << ADSC); // Iniciar conversión
}

void setup()
{
	DDRD = 0xFF;  // LEDs y display
	PORTD = 0x00;

	DDRC &= ~((1 << PC0) | (1 << PC1)); // Botones
	PORTC |= (1 << PC0) | (1 << PC1);   // Pull-ups

	DDRB |= (1 << PB3) | (1 << PB2) | (1 << PB1); // Transistores
	PORTB &= ~((1 << PB3) | (1 << PB2) | (1 << PB1));

	// Timer0: antirrebote
	TCCR0A = 0x00;
	TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
	TIMSK0 = (1 << TOIE0);

	// Timer2: multiplexado rápido
	TCCR2A = 0x00;
	TCCR2B = (1 << CS21); // Prescaler 8
	TIMSK2 = (1 << TOIE2);
	TCNT2 = 0;

	initADC();

	counter = 0;
	update_leds();
	sei();
}

int main(void)
{
	setup();
	while (1) {
		// Todo se maneja por interrupciones
	}
}

// Timer2 - Multiplexado
ISR(TIMER2_OVF_vect)
{
	PORTB &= ~((1 << PB3) | (1 << PB2) | (1 << PB1)); // Apagar transistores

	switch(mux_state) {
		case 0:
			PORTD = tabla_7seg[(adc_value >> 4) & 0x0F]; // Dígito alto
			PORTB |= (1 << PB3); // Transistor display alto
			break;
		case 1:
			PORTD = tabla_7seg[adc_value & 0x0F];        // Dígito bajo
			PORTB |= (1 << PB2); // Transistor display bajo
			break;
		case 2:
			PORTD = counter; // Mostrar contador binario
			PORTB |= (1 << PB1); // Transistor contador
			break;
	}
	mux_state = (mux_state + 1) % 3;
}

// Timer0 - Antirrebote y lectura de botones
ISR(TIMER0_OVF_vect)
{
	static uint8_t stable_state = 0x03;
	uint8_t current_state = PINC & ((1 << PC0) | (1 << PC1));

	// Botón PC0 - Incrementar
	if (!(current_state & (1 << PC0))) {
		if (++debounce_counters[0] >= 5) {
			if (stable_state & (1 << PC0)) {
				counter++;
			}
			stable_state &= ~(1 << PC0);
		}
	} else {
		debounce_counters[0] = 0;
		stable_state |= (1 << PC0);
	}

	// Botón PC1 - Decrementar
	if (!(current_state & (1 << PC1))) {
		if (++debounce_counters[1] >= 5) {
			if (stable_state & (1 << PC1)) {
				counter--;
			}
			stable_state &= ~(1 << PC1);
		}
	} else {
		debounce_counters[1] = 0;
		stable_state |= (1 << PC1);
	}
}

// ADC completo
ISR(ADC_vect)
{
	adc_value = ADCH; // Lectura justificada a la izquierda (8 bits)
	ADCSRA |= (1 << ADSC); // Nueva conversión
}
