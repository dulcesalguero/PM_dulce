//// ESTE SI FUNCIONA EN ORDEN y con pre lab :)

;**********************************************************
; Lab_02.asm
; Contador hexadecimal en display 7 segmentos y LEDs
; Microcontrolador: ATmega328P
; Autor: Dulce Salguero - 231208

; ENCABEZADO
;**********************************************************
.include "M328PDEF.inc"
.CSEG
.ORG 0x0000	
rjmp setup

;***************************************
; STACK POINTER
;****************************************
LDI R16, LOW(RAMEND) 
OUT SPL, R16 
LDI R16, HIGH(RAMEND)
OUT SPH, R16

;***********************************************
; CONFIGURACION 
;***********************************************
SETUP:
	// CONFIGURAMOS EL PRESCALER PRINCIPAL
	LDI     R16, (1 << CLKPCE)     // Habilitar cambio de prescaler
	STS     CLKPR, R16
	LDI     R16, (1 << CLKPS2)
	STS     CLKPR, R16             // CONFIGURAMOS PRESCALER A 16 F_CPU = 1Mhz

	// CONFIGURAMOS EL PUERTO D PARA DISPLAY
	LDI     R16, 0xFF         // Configuramos el puerto D como salida
	OUT     DDRD, R16

	// CONFIGURAMOS EL PUERTO C PARA BOTONES
	LDI     R16, 0x00         // Configuramos PC2 y PC3 como entrada
	OUT     DDRC, R16
	LDI     R16, 0xFF         // Activamos pull-ups
	OUT     PORTC, R16

	// CONFIGURAMOS EL PUERTO B PARA LEDS (D8-D11)
	LDI     R16, 0x0F         // PB0-PB3 (D8-D11) como salida
	OUT     DDRB, R16

	// CONFIGURAMOS EL TIMER0
	LDI     R16, 0x00
	OUT     TCCR0A, R16       // Modo normal
	LDI     R16, (1 << CS01) | (1 << CS00) // PRESCALER 64
	OUT     TCCR0B, R16	

	// Inicializamos valores
	LDI     R20, 0x00         // Contador hexadecimal (display)
	LDI     R21, 0x00         // Contador binario (LEDs)
	LDI     R23, 0xFF         // Estado inicial de botones

void_loop:
	LDI     R16, 0x00
	OUT     TCNT0, R16        // Reiniciamos el contador 
	LDI     R18, 6            // Repetimos 6 veces para 100ms

esperar_100ms:
	IN      R16, TIFR0        // Leer bandera de desbordamiento
	SBRS    R16, TOV0       
	RJMP    esperar_100ms

	LDI     R16, (1 << TOV0)
	OUT     TIFR0, R16        // Borra la bandera

	INC     R21               // Incrementa el contador de LEDs cada 100ms
	ANDI    R21, 0x0F         // Asegura que se mantenga en 4 bits (0-15)
	OUT     PORTB, R21        // Muestra el valor en los LEDs (D8-D11)

	CALL    BOTONES           // Manejo de botones para el display
	CALL    DISPLAY_UPDATE
	RJMP    void_loop

DEBOUNCE:
    LDI  R18, 10      // Ajusta este valor para controlar el tiempo de debounce
DEBOUNCE_LOOP:
    LDI  R16, 0x00
    OUT  TCNT0, R16    // Reiniciamos Timer0
ESPERA_DEBOUNCE:
    IN   R16, TIFR0
    SBRS R16, TOV0
    RJMP ESPERA_DEBOUNCE
    LDI  R16, (1 << TOV0)
    OUT  TIFR0, R16    // Borra la bandera

    DEC  R18
    BRNE DEBOUNCE_LOOP
    RET

BOTONES:
    CALL  DEBOUNCE     // Llamamos al debounce antes de leer
    IN    R22, PINC    // Leer botones

    SBRS  R22, 3       // Si el botón en PC3 está presionado (LOW)
    CALL  aumento

    SBRS  R22, 2       // Si el botón en PC2 está presionado (LOW)
    CALL  decremento

    RET

aumento:
    CPI     R20, 0x0F   // Si es 0x0F, reinicia
    BREQ    RESET
    INC     R20
    RET

decremento:
    CPI     R20, 0x00   // Si es 0, va al máximo
    BREQ    MAXEO
    DEC     R20
    RET	

RESET:  
    LDI     R20, 0x00  
    CALL    DISPLAY_UPDATE  
    RJMP    void_loop  

MAXEO:  
    LDI     R20, 0x0F  
    CALL    DISPLAY_UPDATE  
    RJMP    void_loop  

DISPLAY_UPDATE:
    LDI     ZH, HIGH(TABLE<<1)
    LDI     ZL, LOW(TABLE<<1)
    CLR     R1        ; Asegura que R1 = 0
    ADD     ZL, R20   ; Suma el índice (R20) a la dirección base de la tabla
    ADC     ZH, R1    ; Suma el acarreo
    LPM     R16, Z    ; Carga el valor de la tabla
    OUT     PORTD, R16; Muestra en el display
    RET

;*************** TABLA DE BÚSQUEDA (CÁTODO COMÚN) ***************
TABLE:
    .DB 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
