#include <avr/io.h>
#include <util/delay.h>

// Configuración UART (9600 baudios, 8 bits, sin paridad, 1 stop bit)
void initUART() {
    UBRR0H = 0;
    UBRR0L = 103; // 9600 bauds @ 16MHz
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // Habilita RX, TX e interrupción por RX
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits, sin paridad, 1 stop bit
}

// Interrupción por recepción UART
ISR(USART_RX_vect) {
    char comando = UDR0; // Lee el byte recibido
    if (modo_actual == MODO_SERIAL) {
        procesarComando(comando); // Procesamos solo si estamos en modo serial
    }
}

// Procesa los comandos recibidos por UART
void procesarComando(char comando) {
    // Ejemplo: 'A'=Servo1 90°, 'B'=Servo2 45°, etc.
    switch(comando) {
        case 'A': 
            PWM_setAngle(2100); // Ejemplo: posición para servo1
            break;
        case 'B':
            PWM_setAngle2(1199); // Ejemplo: posición para servo2
            break;
        // Añade más casos según tus necesidades
    }
}

.MAIN
int main(void) {
    setup();
    initADC();
    initPWM();
    initUART(); // Inicializa UART
    sei(); // Habilita interrupciones globales

    while(1) {
        cambiar_modo();
        
        switch(modo_actual) {
            case MODO_FISICO:
                // ... (tu código original de modo manual)
                break;
                
            case MODO_EPROM:
                // ... (código EEPROM)
                break;
                
            case MODO_SERIAL:
                // Nada aquí, todo se maneja por interrupciones UART
                break;
        }
    }
}


/* Protocolo de comunicación propuesto:
Envía comandos simples por el monitor serial (ejemplo):

M → Cambia a modo manual.

E → Cambia a modo EEPROM.

S → Cambia a modo serial.

A90 → Mueve el servo1 a 90°.

B45 → Mueve el servo2 a 45°. */




void procesarComando(char comando) {
    static uint16_t valor = 0;
    static uint8_t servo_idx = 0;
    
    if (comando >= 'A' && comando <= 'F') { // Servos 1-6 (A-F)
        servo_idx = comando - 'A';
    } 
    else if (comando >= '0' && comando <= '9') { // Dígitos angulo
        valor = valor * 10 + (comando - '0');
    }
    else if (comando == '\n') { // Fin de comando
        switch(servo_idx) {
            case 0: PWM_setAngle((valor * -1.96) + 2100.0); break;
            case 1: PWM_setAngle2((valor * 1.96) + 1199.0); break;
            // Añade los demás servos...
        }
        valor = 0;
    }
}

/* Pruebas:
Envía S para entrar en modo serial.

Envía A90\n para mover el servo1 a 90° (ajusta los valores según tu mapeo).

Envía M para volver al modo manual. */

